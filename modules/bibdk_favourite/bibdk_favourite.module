<?php

require_once(drupal_get_path('module', 'bibdk_favourite') . '/includes/bibdk_favourite.agencies.inc');
require_once(drupal_get_path('module', 'bibdk_favourite') . '/includes/bibdk_favourite.ajax.inc');
require_once(drupal_get_path('module', 'bibdk_favourite') . '/includes/bibdk_favourite.borchk.inc');
require_once(drupal_get_path('module', 'bibdk_favourite') . '/includes/bibdk_favourite.forms.inc');
require_once(drupal_get_path('module', 'bibdk_favourite') . '/includes/bibdk_favourite.mypage.inc');
require_once(drupal_get_path('module', 'bibdk_favourite') . '/includes/bibdk_favourite.gdpr.inc');
require_once(drupal_get_path('module', 'bibdk_favourite') . '/includes/bibdk_favourite.no_favourites.inc');
require_once(drupal_get_path('module', 'bibdk_favourite') . '/includes/bibdk_favourite.webservice.inc');
require_once(drupal_get_path('module', 'bibdk_favourite') . '/includes/bibdk_favourite.shortcodes.inc');
require_once(drupal_get_path('module', 'bibdk_favourite') . '/lib/FavouriteAgency.php');

/**
 * Implements hook_menu().
 */
function bibdk_favourite_menu() {
  // form to edit favourite data
  $items['overlay/favourite/userdata/%'] = array(
    'title' => 'Edit data',
    'description' => 'Library helpdesk form.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_favourite_user_form_fields', 3),
    'file' => 'includes/bibdk_favourite.forms.inc',
    'access callback' => 'ding_user_is_provider_user',
    'type' => MENU_CALLBACK,
  );

  // ajax call for deleting a favourite
  $items['favourite_delete/ajax/%'] = array(
    'title' => 'ajax_delete_favourite',
    'page callback' => 'bibdk_favourite_ajax_link_delete_favourite',
    'file' => 'includes/bibdk_favourite.ajax.inc',
    'page arguments' => array(2),
    'access callback' => 'ding_user_is_provider_user',
    'type' => MENU_CALLBACK,
  );

  // ajax call for setting a favourite
  $items['favourite/add/%'] = array(
    'title' => 'ajax_set_favourite',
    'page callback' => 'bibdk_favourite_ajax_link_set_favourite',
    'file' => 'includes/bibdk_favourite.ajax.inc',
    'page arguments' => array(2),
    'access callback' => 'ding_user_is_provider_user',
    'type' => MENU_CALLBACK,
  );

  $items['favourite/remove/%'] = array(
    'title' => 'ajax_set_favourite',
    'page callback' => 'bibdk_favourite_ajax_remove_favourite',
    'file' => 'includes/bibdk_favourite.ajax.inc',
    'page arguments' => array(2),
    'access callback' => 'ding_user_is_provider_user',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements HOOK__mypage_link().
 *
 * @return mixed
 */
function bibdk_favourite_mypage_link() {
  $items['user/%user/bibdk_favourite_list'] = array(
    'title' => t('Favoritbiblioteker', array(), array('context' => 'bibdk_frontend')),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_favourite_get_favourites_form'),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'weight' => 20,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function bibdk_favourite_theme() {
  return array(
    'bibdk_favourite_action_links' => array(
      'variables' => array('links' => array()),
    ),
    'bibdk_favourite_more_info' => array(
      'variables' => array(
        'branch' => NULL,
        'openingHours' => NULL,
        'toggle_enabled' => TRUE,
        'tools' => NULL,
        'address' => NULL,
        'pickupallowed' => NULL,
        'librarydkcontact' => NULL,
        'contact' => NULL,
        'more' => array()
      ),
      'template' => 'theme/bibdk_favourite_more_info',
    ),
    'bibdk_favourite_library' => array(
      'variables' => array(
        'branchName' => NULL,
        'agencyName' => NULL,
        'actions' => NULL,
        'moreinfo' => NULL,
        'branchid' => NULL,
        'add_classes' => array(),
        'toggle_enabled' => TRUE,
        'temporarilyClosedReason' => NULL
      ),
      'template' => 'theme/bibdk_favourite_library',
    ),
    'bibdk_favourite_opening_hours' => array(
      'variables' => array('branch' => NULL,),
    ),
    'bibdk_favourite_tools' => array(
      'variables' => array('branch' => NULL,),
    ),
    'bibdk_favourite_address' => array(
      'variables' => array('branch' => NULL,),
    ),
    'bibdk_favourite_librarydk_contact' => array(
      'variables' => array('branch' => NULL,),
    ),
    'bibdk_favourite_contact' => array(
      'variables' => array('branch' => NULL,),
    ),
    'bibdk_favourite_pickup_allowed' => array(
      'variables' => array('branch' => NULL,),
    ),
    'bibdk_favourite_branch_short_name' => array(
      'variables' => array('branch' => NULL,),
    ),
  );
}

/**
 * Get favourites. If order-agency is set it will be first elements
 *
 * @return array; an array with agencyId as key, favourite-object as value
 */
function bibdk_favourite_get_favourites() {
  $agencies = NULL; //isset($_SESSION['bibdk_favourites']) ? $_SESSION['bibdk_favourites'] : NULL;
  if (empty($agencies)) {
    _bibdk_favourite_set_agencies();
  }
  $agencies = isset($_SESSION['bibdk_favourites']) ? $_SESSION['bibdk_favourites'] : array();

  $favourites = array();
  foreach ($agencies as $key => $serialized_agency) {
    $favourites[$key] = unserialize($serialized_agency);
  }

  return _bibdk_favourite_set_favourite_first($favourites);
}

/**
 * Arrange favourite array with order-agency as first element
 *
 * @param array $favourites
 * @return array
 */
function _bibdk_favourite_set_favourite_first(array $favourites) {
  foreach ($favourites as $key => $fav) {
    if ($fav->orderAgency) {
      $orderagency = array($key => $fav);
      $favourites = $orderagency + $favourites;
      break;
    }
  }

  return $favourites;
}

/**
 * If user has order library, return library else return false
 *
 * @return FavouriteAgency|null
 */
function bibdk_favourite_get_order_library() {
  $favourites = bibdk_favourite_get_favourites();
  $order = reset($favourites);
  if (!empty($order) && $order->getOrderAgency()) {
    return $order;
  }

  return NULL;
}

/**
 * Implements hook to user_help_list
 * */
function bibdk_favourite_user_help_list() {
  return array('favourite_mypage_help_key' => 'favourite_mypage_help_label');
}

/**
 * Implements hook_add_to_vejviser (@see bibdk_vejviser.module)
 * */
function bibdk_favourite_add_to_vejviser($branchId) {
  return bibdk_favourite_list_link($branchId);
}

/**
 * Returns a link for user/UID/bibdk_favourite_list.
 *
 * @param $branch_id
 * @return array
 */
function bibdk_favourite_list_link($branch_id) {
  $already_fav = bibdk_favourite_library_is_favourited($branch_id);

  $text = $already_fav ? t('Remove favoritelibrary', array(), array('context' => 'bibdk_favourite')) : t('Add favoritelibrary', array(), array('context' => 'bibdk_favourite'));
  $path = $already_fav ? 'favourite/remove/' . $branch_id : 'bibdk_modal/bibdk_favourite_list';
  $query = $already_fav ? array() : array('agency' => $branch_id);
  $class = array(
    'bibdk-favourite--add-remove-library',
  );

  if ($already_fav) {
    $class[] = 'bibdk-favourite--library-is-favourited';
    $class[] = 'use-ajax';
  }

  return array(
    '#theme' => 'link',
    '#text' => $text,
    '#path' => $path,
    '#options' => array(
      'attributes' => array(
        'alt' => $text,
        'class' => $class,
        'id' => array('add-remove-' . $branch_id),
        'data-reveal-id' => 'bibdk-modal',
        'data-reveal-ajax' => 'true'
      ),
      'query' => $query,
      'html' => TRUE,
      'svg' => 'svg-star',
    ),
  );
}

/**
 * Check if favourite is already selected by user.
 * Returns TRUE if library is already favourited by user. Otherwise FALSE is
 * returned.
 *
 * @param $branch_id
 * @return array|bool
 */
function bibdk_favourite_library_is_favourited($branch_id) {
  if (!ding_user_is_provider_user()) {
    return FALSE;
  }

  $favourites = bibdk_favourite_get_favourites();
  if (empty($favourites) || !isset($favourites[$branch_id])) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * Returns a link for the bibdk vejviser
 *
 * @return array
 */
function _bibdk_favourite_get_vejviser_link() {
  $render = array(
    'link' => array(
      '#type' => 'link',
      '#title' => t("Find library"),
      '#href' => 'vejviser',
      '#options' => array(
        'html' => TRUE,
      ),
    ),
    '#weight' => -1000,
  );

  return $render;
}

/**
 * @param array $variables
 * @return string
 */
function theme_bibdk_favourite_action_links($variables) {
  $links = $variables['links'];
  $items = array();
  foreach ($links as $link) {
    $item['data'] = _bibdk_favourite_render_link($link);
    $items[] = $item;
  }

  return theme('item_list', array('items' => $items));
}

function _bibdk_favourite_render_link($link) {
  return drupal_render($link);
}

/**
 * Save the favorite on the webservice.
 *
 * @param array $form
 * @param array $form_state
 * @return mixed
 */
function bibdk_favourite_save_favourite($form, &$form_state) {
  $branchid = $form_state['values']['branchid'];
  $message = bibdk_favourite_save_favourite_on_webservice($branchid);
  drupal_set_message($message);
  bibdk_favourite_set_userdata($form, $form_state);

  return $form;
}

/**
 * @param $form
 * @param $form_state
 */
function bibdk_favourite_set_userdata($form, &$form_state) {
  $userdata = array();
  $valid_fields = array(
    'cpr',
    'userId',
    'cardno',
    'customId',
    'pincode',
    'userName',
    'userDateOfBirth',
    'userAddress',
    'userMail',
    'userTelephone',
    'barcode',
    'subdivision'
  );
  foreach ($form_state['values'] as $key => $value) {
    if (in_array($key, $valid_fields)) {
      if (!empty($value)) {
        if ($key == 'cpr' or $key == 'userId' or $key == 'cardno') {
          $userdata[$key] = str_replace("-", "", $value);
        }
        else {
          $userdata[$key] = $value;
        }
      }
    }
  }
  $agencyid = $form_state['values']['branchid'];
  bibdk_favourite_save_userdata($agencyid, $userdata);
  // clear session
  if (isset($_SESSION['bibdk_favourites'])) {
    unset($_SESSION['bibdk_favourites']);
  }
  $form_state['rebuild'] = TRUE;
}

/**
 * Save the userdata on the provider
 *
 * @param $agencyid
 * @param array $userdata
 * @param bool $show_message
 */
function bibdk_favourite_save_userdata($agencyid, array $userdata, $show_message = TRUE) {
  global $user;
  if (!ding_user_is_provider_user($user)) {
    return;
  }
  try {
    $creds = ding_user_get_creds($user);
  } catch (Exception $e) {
    // do nothing
    // @TODO this is probably an autologout -ACT ON IT
  }

  $data = serialize($userdata);
  $response = bibdk_provider_user_save_favourite_data($creds['name'], $agencyid, $data);
  if ($response !== FALSE) {
    if ($show_message) {
      $message_text = t('user_changes_saved', array(), array('context' => 'bibdk_favourite'));
    }
  }
  else {
    // @TODO provider returned FALSE - set a message for user
  }
}

/**
 * Get fields required by Agency
 *
 * @param $agencyId
 * @return VipCoreService bibdkReservationUserInput
 */
function bibdk_favourite_get_agency_fields($agencyId) {

  $response = vip_core_service($agencyId, 'userOrderParameters');
  //$fields = new VipCoreFields($response);
  return new VipCoreService($response, 'userOrderParameters');
}

/**
 * Invoke bibdk_providers user_set_favourite method
 *
 * @global stdClass $user
 * @param mixed $branchId
 * @return boolean
 */
function bibdk_favourite_set_favourite($branchId) {
  global $user;

  if (ding_user_is_provider_user($user)) {
    try {
      $creds = ding_user_get_creds($user);
    } catch (Exception $e) {
      // do nothing
    }
    if (empty($creds)) {
      return FALSE;
    }
    $response = ding_provider_invoke('user', 'set_favourite', $creds['name'], $branchId);
    return $response;
  }
}


/**
 * Translate and return a bibdk_favourite standard error message
 *
 * @return null|string
 */
function _bibdk_favourite_set_error_text() {
  return t('bibdk_favourite_something_went_wrong', array(), array('context' => 'bibdk_favourite'));
}

/**
 * Translate and return a bibdk_favourite standard success message
 *
 * @return null|string
 */
function _bibdk_favourite_set_favourite_text() {
  return t('Favourite library has been set', array(), array('context' => 'bibdk_favourite'));
}

/**
 * Translate and return a bibdk_favourite standard deleted message
 *
 * @return null|string
 */
function _bibdk_favourite_set_delete_text() {
  return t('Favourite library has been deleted', array(), array('context' => 'bibdk_favourite'));
}

/**
 * Sort function for agency list
 *
 * @return integer
 */
function _bibdk_favourite_sort($a, $b) {
  if ($a->orderAgency == $b->orderAgency) {
    return 0;
  }
  return ($a->orderAgency < $b->orderAgency) ? 1 : -1;
}

/**
 * @param $form
 * @param $form_state
 * @param $fields
 * @param null $userData
 * @param null $branchid
 *
 * @return mixed
 */
function bibdk_favourite_userdata_form($form, &$form_state, $fields, $userData = NULL, $branchid = NULL) {
  $params = isset($fields) ? $fields->getUserParameters() : NULL;
  if (empty($params)) {
    $form['wrapper']['error'] = array('#markup' => _bibdk_favourite_error_no_agency_user_data());
    return $form;
  }

  $form['description'] = array(
    '#theme' => 'html_tag',
    '#tag' => 'p',
    '#value' => t('description_text', array(), array('context' => 'bibdk_favourite')),
    '#weight' => -101,
  );

  // checkbox to unmask password fields
  $form['uncheck'] = array(
    '#title' => t('Show_masked_input'),
    '#type' => 'checkbox',
    '#attributes' => array('class' => array(drupal_html_class('bibdk_unmask_password_field'))),
    '#weight' => -100,
  );

  $form['wrapper'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(drupal_html_class('switch_me')),
    ),
  );

  // insert a fake password field to stop browsers from autofilling the real fields
  // with saved password
  $form['wrapper']['fake_password'] = array(
    '#attributes' => array(
      'aria-disabled' => array('false'),
      'aria-hidden' => array('true'),
      'autocomplete' => array('new-pincode'),
      'style' => array('position:absolute; top: -1000px;'),
      'tabindex' => array('-1'),
    ),
    '#type' => 'password',
  );

  foreach ($fields->getUserParameters() as $userParameter) {
    $type = $userParameter['type'];
    $title = isset($userParameter['field_name']) ? $userParameter['field_name'] : "";
    $userDataElement = isset($userData[$userParameter['type']]) ? $userData[$userParameter['type']] : NULL;
    $value = isset($form_state['values'][$type]) ? $form_state['values'][$type] : $userDataElement;
    if ($type == 'userMail') {
      if (!$userParameter['required']) {
        $title .= ' ' . t('label_notice_recommended', array(), array('context' => 'bibdk_favourite'));
      }
    }

    $attributes = array();
    if (isset($userParameter['field_type']) && $userParameter['field_type'] == 'password') {
      $attributes['class'] = array(drupal_html_class('bibdk_password_field'));
      $attributes['autocomplete'] = 'password';
      //NB This doesn't work because of validation - so it is temporarily disabled.
      //$attributes['name'] = 'search-' . $type;
    }

    $form['wrapper'][$type] = array(
      '#attributes' => $attributes,
      '#type' => 'textfield',
      '#title' => $title,
      '#description' => isset($userParameter['field_description']) ? $userParameter['field_description'] : NULL,
      '#required' => $userParameter['required'],
      '#default_value' => isset($value) ? $value : "",
    );
  }

  if (isset($branchid)) {
    $form['wrapper']['subdivision'] = bibdk_favourite_get_selector_for_subagencies($branchid, $userData);
  }

  return $form;
}

/**
 * Render the view of an agency branch and wrap it in an form element
 *
 * @param VipCoreAgencyBranch $branch
 * @param array $settings
 *
 * @return mixed
 */
function bibdk_favourite_view_agency_branch(VipCoreAgencyBranch $branch, $settings = array()) {
  // Actions can be both links and form elements, and needs to handles separately
  $actions = isset($settings['#actions']) ? $settings['#actions'] : '';
  unset($settings['#actions']);

  $classes = array('favourite-' . $branch->getBranchId());
  if ($branch->isOrderLibrary()) {
    $classes[] = 'order-agency';
  }

  // Set default values
  global $language;
  $default = array(
    '#theme' => 'bibdk_favourite_library',
    '#branchName' => $branch->getBranchName(),
    '#actions' => drupal_render($actions),
    '#add_classes' => $classes,
    '#moreinfo' => bibdk_favourite_get_more_info($branch),
    '#branchid' => $branch->getBranchId(),
    '#temporarilyClosedReason' => bibdk_favourite_temporarily_closed_message($branch),
  );

  // create render array
  $render['library'] = $settings;
  $render['library'] += $default;
  $render['action'] = $actions;

  // place branch on top if set as order-agency
  if ($branch->isOrderLibrary()) {
    $render['#weight'] = -1;
  }
  return array(
    '#title' => $branch->getBranchName(),
    $branch->getBranchId() => $render,
  );
}

/**
 * @return null|string
 */
function _bibdk_favourite_error_no_agency_user_data() {
  return t('no_agency_data_from_agency');
}

/**
 * @param $branchId
 *
 * @return array|void
 */
function bibdk_favourite_get_selector_for_subagencies($branchId, $userData) {

  $pickupAgencyList = array();
  try {
  $pickupAgencyList = vip_core_pickupAgencyList([$branchId]);
  } catch (Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
  }
  $options = array();
  if (is_array($pickupAgencyList)) {
    /** @var VipCoreAgency $agency */
    foreach ($pickupAgencyList AS $agency) {
      /** @var VipCoreAgencyBranch $pickupAgency */
      foreach($agency->getPickUpAgencies() AS $pickupAgency) {
        if (!empty($pickupAgency->getBranchId()) && $pickupAgency->getBranchId() === $branchId) {
          if (empty($pickupAgency->getAgencySubdivisions())) {
            return;
          } else {
            if ($pickupAgency->getBranchType() == 'b') {
              foreach ($pickupAgency->getAgencySubdivisions() as $key => $value) {
                $options['Bogbussen:'][$value] = $value;
              }
            } else {
              $options[$pickupAgency->getBranchId()] = $pickupAgency->getBranchShortName();
            }
          }
        }
      }
    }
  }

  $value = isset($userData['subdivision']) ? $userData['subdivision'] : NULL;

  foreach ($options as $key => $option) {
    if (!isset($value)) {
      $value = $option;
    }
    $option_list[$key] = $option;
  }
  $option_list[$value] = $value;

  $form_element = array(
    '#title' => t('Select bus stop', array(), array('context' => 'bibdk_favourite')),
    '#type' => 'select',
    '#options' => $option_list,
    '#default_value' => $value,
  );

  return $form_element;
}

/**
 * Generate more info for branch
 * get default moreinfo for a branch
 *
 * @param VipCoreAgencyBranch $branch
 *
 * @return array
 * render array for drupal_render
 * @throws Exception
 */
function bibdk_favourite_get_more_info(VipCoreAgencyBranch $branch) {
  $tools = get_bibdk_favourite_tools($branch);
  $defaults = array(
    '#theme' => 'bibdk_favourite_more_info',
    '#branch' => $branch,
    '#openingHours' => $branch->getOpeningHours(),
    '#tools' => $tools,
    '#address' => $branch->getAddress(),
    '#pickupallowed' => $branch->getPickupAllowed(),
    '#librarydkcontact' => bibdk_favourite_element_create_list($branch->getLibrarydkContact()),
    '#contact' => bibdk_favourite_element_create_list($branch->getContact()),
  );

  // @see netpunkt_agency::netpunkt_agency_ting_agency_get_more_info_alter
  drupal_alter('bibdk_favourite_get_more_info', $defaults, $branch);

  return $defaults;
}

/**
 * Check if Temporarily closed message exists for branch and return message
 *
 * @param $branch
 *
 * @return string
 */
function bibdk_favourite_temporarily_closed_message($branch) {
  global $language;
  // Handle TemporarilyClosedReason
  $tmp_reason = $branch->getTemporarilyClosedReason($language->language);

  // @see netpunkt_agency::netpunkt_agency_ting_agency_temporarily_closed_message
  drupal_alter('bibdk_favourite_temporarily_closed_message', $tmp_reason, $branch);

  if ($tmp_reason != 'bibdk_favourite_no_temporarilyClosedReason') {
    // Hide all drupalmessages
    $messages = drupal_get_messages();
    // Set  message for temporarilyClosedReason
    drupal_set_message($tmp_reason, 'warning');
    $tmp_reason = theme('status_messages');
    // Restore old messages
    foreach ($messages as $key => $message) {
      drupal_set_message($message[0], $key);
    }
  }
  else {
    $tmp_reason = NULL;
  }

  return $tmp_reason;
}

/**
 * @param $branch
 * @return array
 */
function get_bibdk_favourite_tools($branch) {
  /** @var VipCoreAgencyBranch  $branch */
  $links = $branch->getActionLinks();
  $items = array();
  if (!empty($links)) {
    foreach ($links as $name => $link) {
      $item['data'] = l(
        $name,
        $link,
        array('attributes' => array('target' => '_blank'))
      );
      $items[] = $item;
    }
    return array(
      '#theme' => 'item_list',
      '#items' => $items
    );
  }
}

/**
 * @param $list
 * @return string
 */
function bibdk_favourite_element_create_list($list) {
  $output = '';
  if (!empty($list)) {
    foreach ($list as $key => $value) {
      $output .= $key . ' : ' . $value . '<br/>';
    }
  }
  return $output;
}

/**
 * \brief Theme address for given agency
 *
 * @param array $variables
 * @return string (html)
 */
function theme_bibdk_favourite_address($variables) {
  $branch = $variables['branch'];
  if (empty($branch)) {
    return;
  }
  $address = $branch->getAddress();
  return $address;
}

/**
 * \brief Theme pickup for given agency
 *
 * @param array $variables
 * @return string (html)
 */
function theme_bibdk_favourite_pickup_allowed($variables) {
  /** @var VipCoreAgencyBranch $branch */
  $branch = $variables['branch'];
  if (empty($branch)) {
    return;
  }
  return $branch->getPickupAllowed();
}

/**
 * preprocess function for library template (bibdk_favourite_library.tpl.php)
 */
function template_preprocess_bibdk_favourite_library(&$variables) {
  if (isset($variables['add_classes'])) {
    $variables['classes_array'] = array_merge($variables['classes_array'], $variables['add_classes']);
  }
}

/**
 * \brief Theme contact info
 *
 * @param array $variables
 * @return string (html)
 */
function theme_bibdk_favourite_contact($variables) {
  $branch = $variables['branch'];
  if (empty($branch)) {
    return;
  }
  $contact_array = $branch->getContact();
  return bibdk_favourite_element_create_list($contact_array);
}

/**
 * \brief Theme librarydkcontact info
 *
 * @param array $variables
 * @return string (html)
 */
function theme_bibdk_favourite_librarydk_contact($variables) {
  $branch = $variables['branch'];
  if (empty($branch)) {
    return;
  }
  $contact_array = $branch->getLibrarydkContact();
  return bibdk_favourite_element_create_list($contact_array);
}

/**
 * \brief Theme agency opening hours
 *
 * @global stdClass $language
 * @param array $variables
 * @return string (html)
 */
function theme_bibdk_favourite_opening_hours($variables) {
  $branch = $variables['branch'];
  if (empty($branch)) {
    return;
  }
  global $language;
  $lang = $language->language;
  $render_array = array('#markup' => $branch->getOpeningHours($lang));
  if (empty($render_array)) {
    return NULL;
  }
  return drupal_render($render_array);
}

/**
 * \brief Theme links given from agency
 *
 * @param $variables
 * @return string|void
 * @throws Exception
 */
function theme_bibdk_favourite_tools($variables) {
  $branch = $variables['branch'];
  if (empty($branch)) {
    return;
  }
  $links = $branch->getActionLinks();
  $items = array();
  if (!empty($links)) {
    foreach ($links as $name => $link) {
      $item['data'] = l($name, $link, array());
      $items[] = $item;
    }
    return theme('item_list', array('items' => $items));
  }
}
