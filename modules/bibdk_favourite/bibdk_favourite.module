<?php

require_once(drupal_get_path('module', 'bibdk_favourite') . '/includes/bibdk_favourite.agencies.inc');
require_once(drupal_get_path('module', 'bibdk_favourite') . '/includes/bibdk_favourite.ajax.inc');
require_once(drupal_get_path('module', 'bibdk_favourite') . '/includes/bibdk_favourite.borchk.inc');
require_once(drupal_get_path('module', 'bibdk_favourite') . '/includes/bibdk_favourite.forms.inc');
require_once(drupal_get_path('module', 'bibdk_favourite') . '/includes/bibdk_favourite.mypage.inc');
require_once(drupal_get_path('module', 'bibdk_favourite') . '/includes/bibdk_favourite.no_favourites.inc');
require_once(drupal_get_path('module', 'bibdk_favourite') . '/includes/bibdk_favourite.webservice.inc');
require_once(drupal_get_path('module', 'bibdk_favourite') . '/includes/bibdk_favourite.shortcodes.inc');
require_once(drupal_get_path('module', 'ting_agency') . '/TingAgency.php');
require_once(drupal_get_path('module', 'bibdk_favourite') . '/lib/FavouriteAgency.php');

/**
 * Implements hook_menu().
 */
function bibdk_favourite_menu() {
  // form to edit favourite data
  $items['overlay/favourite/userdata/%'] = array(
    'title' => 'Edit data',
    'description' => 'Library helpdesk form.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_favourite_user_form_fields', 3),
    'file' => 'includes/bibdk_favourite.forms.inc',
    'access callback' => 'ding_user_is_provider_user',
    'type' => MENU_CALLBACK,
  );

  // ajax call for deleting a favourite
  $items['favourite_delete/ajax/%'] = array(
    'title' => 'ajax_delete_favourite',
    'page callback' => 'bibdk_favourite_ajax_link_delete_favourite',
    'file' => 'includes/bibdk_favourite.ajax.inc',
    'page arguments' => array(2),
    'access callback' => 'ding_user_is_provider_user',
    'type' => MENU_CALLBACK,
  );

  // ajax call for setting a favourite
  $items['favourite/add/%'] = array(
    'title' => 'ajax_set_favourite',
    'page callback' => 'bibdk_favourite_ajax_link_set_favourite',
    'file' => 'includes/bibdk_favourite.ajax.inc',
    'page arguments' => array(2),
    'access callback' => 'ding_user_is_provider_user',
    'type' => MENU_CALLBACK,
  );

  $items['favourite/remove/%'] = array(
    'title' => 'ajax_set_favourite',
    'page callback' => 'bibdk_favourite_ajax_remove_favourite',
    'file' => 'includes/bibdk_favourite.ajax.inc',
    'page arguments' => array(2),
    'access callback' => 'ding_user_is_provider_user',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements HOOK__mypage_link().
 *
 * @return mixed
 */
function bibdk_favourite_mypage_link() {
  $items['user/%user/bibdk_favourite_list'] = array(
    'title' => t('Favoritbiblioteker', array(), array('context' => 'bibdk_frontend')),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_favourite_get_favourites_form'),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'weight' => 20,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function bibdk_favourite_theme() {
  return array(
    'bibdk_favourite_action_links' => array(
      'variables' => array('links' => array()),
    ),
  );
}

/**
 * Get favourites. If order-agency is set it will be first elements
 *
 * @return array; an array with agencyId as key, favourite-object as value
 */
function bibdk_favourite_get_favourites() {
  $agencies = isset($_SESSION['bibdk_favourites']) ? $_SESSION['bibdk_favourites'] : NULL;
  if (empty($agencies)) {
    _bibdk_favourite_set_agencies();
  }
  $agencies = isset($_SESSION['bibdk_favourites']) ? $_SESSION['bibdk_favourites'] : array();

  $favourites = array();
  foreach ($agencies as $key => $serialized_agency) {
    $favourites[$key] = unserialize($serialized_agency);
  }

  return _bibdk_favourite_set_favourite_first($favourites);
}

/**
 * Arrange favourite array with order-agency as first element
 *
 * @param array $favourites
 * @return array
 */
function _bibdk_favourite_set_favourite_first(array $favourites) {
  foreach ($favourites as $key => $fav) {
    if ($fav->orderAgency) {
      $orderagency = array($key => $fav);
      $favourites = $orderagency + $favourites;
      break;
    }
  }

  return $favourites;
}

/**
 * If user has order library, return library else return false
 *
 * @return FavouriteAgency|null
 */
function bibdk_favourite_get_order_library() {
  $favourites = bibdk_favourite_get_favourites();
  $order = reset($favourites);
  if (!empty($order) && $order->getOrderAgency()) {
    return $order;
  }

  return NULL;
}

/**
 * Implements hook to user_help_list
 * */
function bibdk_favourite_user_help_list() {
  return array('favourite_mypage_help_key' => 'favourite_mypage_help_label');
}

/**
 * Implements hook_add_to_vejviser (@see bibdk_vejviser.module)
 * */
function bibdk_favourite_add_to_vejviser($branchId) {
  return bibdk_favourite_list_link($branchId);
}

/**
 * Returns a link for user/UID/bibdk_favourite_list.
 *
 * @param $branch_id
 * @return array
 */
function bibdk_favourite_list_link($branch_id) {
  $already_fav = bibdk_favourite_library_is_favourited($branch_id);

  $text = $already_fav ? t('Remove favoritelibrary', array(), array('context' => 'bibdk_favourite')) : t('Add favoritelibrary', array(), array('context' => 'bibdk_favourite'));
  $path = $already_fav ? 'favourite/remove/' . $branch_id : 'bibdk_modal/bibdk_favourite_list';
  $query = $already_fav ? array() : array('agency' => $branch_id);
  $class = array(
    'bibdk-favourite--add-remove-library',
  );

  if($already_fav){
    $class[] = 'bibdk-favourite--library-is-favourited';
    $class[] = 'use-ajax';
  }

  return array(
    '#theme' => 'link',
    '#text' => $text,
    '#path' => $path,
    '#options' => array(
      'attributes' => array(
        'alt' => $text,
        'class' => $class,
        'id' => array('add-remove-' . $branch_id),
        'data-reveal-id' => 'bibdk-modal',
        'data-reveal-ajax' => 'true'
      ),
      'query' => $query,
      'html' => TRUE,
      'svg' => 'svg-star',
    ),
  );
}

/**
 * Check if favourite is already selected by user.
 * Returns TRUE if library is already favourited by user. Otherwise FALSE is
 * returned.
 *
 * @param $branch_id
 * @return array|bool
 */
function bibdk_favourite_library_is_favourited($branch_id) {
  if (!ding_user_is_provider_user()) {
    return FALSE;
  }

  $favourites = bibdk_favourite_get_favourites();
  if (empty($favourites) || !isset($favourites[$branch_id])) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * Returns a link for the bibdk vejviser
 *
 * @return array
 */
function _bibdk_favourite_get_vejviser_link() {
  $render = array(
    'link' => array(
      '#type' => 'link',
      '#title' => t("Find library"),
      '#href' => 'vejviser',
      '#options' => array(
        'html' => TRUE,
      ),
    ),
    '#weight' => -1000,
  );

  return $render;
}

/**
 * @param array $variables
 * @return string
 */
function theme_bibdk_favourite_action_links($variables) {
  $links = $variables['links'];
  $items = array();
  foreach ($links as $link) {
    $item['data'] = _bibdk_favourite_render_link($link);
    $items[] = $item;
  }

  return theme('item_list', array('items' => $items));
}

function _bibdk_favourite_render_link($link) {
  return drupal_render($link);
}

/**
 * Save the favorite on the webservice.
 *
 * @param array $form
 * @param array $form_state
 * @return mixed
 */
function bibdk_favourite_save_favourite($form, &$form_state) {
  $branchid = $form_state['values']['branchid'];
  $message = bibdk_favourite_save_favourite_on_webservice($branchid);
  drupal_set_message($message);
  bibdk_favourite_set_userdata($form, $form_state);

  return $form;
}

/**
 * @param $form
 * @param $form_state
 */
function bibdk_favourite_set_userdata($form, &$form_state) {
  $userdata = array();
  $valid_fields = array(
    'cpr',
    'userId',
    'cardno',
    'customId',
    'pincode',
    'userName',
    'userDateOfBirth',
    'userAddress',
    'userMail',
    'userTelephone',
    'barcode',
    'subdivision'
  );
  foreach ($form_state['values'] as $key => $value) {
    if (in_array($key, $valid_fields)) {
      if (!empty($value)) {
        if ( $key == 'cpr' or $key == 'userId' or $key == 'cardno' ) {
          $userdata[$key] = str_replace("-","",$value);
        } else {
          $userdata[$key] = $value;
        }
      }
    }
  }
  $agencyid = $form_state['values']['branchid'];
  bibdk_favourite_save_userdata($agencyid, $userdata);
  // clear session
  if (isset($_SESSION['bibdk_favourites'])) {
    unset($_SESSION['bibdk_favourites']);
  }
  $form_state['rebuild'] = TRUE;
}

/**
 * Save the userdata on the provider
 *
 * @param $agencyid
 * @param array $userdata
 */
function bibdk_favourite_save_userdata($agencyid, array $userdata) {
  global $user;
  if (!ding_user_is_provider_user($user)) {
    return;
  }
  try {
    $creds = ding_user_get_creds($user);
  }
  catch (Exception $e) {
    // do nothing
  }
  $data = serialize($userdata);
  $response = bibdk_provider_user_save_favourite_data($creds['name'], $agencyid, $data);
  if ($response !== FALSE) {
    drupal_set_message(t('user_changes_saved', array(), array('context' => 'bibdk_favourite')));
  }
}

/**
 * Get fields required by Agency
 *
 * @param $agencyId
 * @return array bibdkReservationUserInput
 */
function bibdk_favourite_get_agency_fields($agencyId) {
  $agency = new TingAgency($agencyId);
  $fields = $agency->getAgencyFields();

  return $fields;
}

/**
 * Invoke bibdk_providers user_set_favourite method
 *
 * @global stdClass $user
 * @param mixed $branchId
 * @return boolean
 */
function bibdk_favourite_set_favourite($branchId) {
  global $user;

  if (ding_user_is_provider_user($user)) {
    try {
      $creds = ding_user_get_creds($user);
    }
    catch (Exception $e) {
      // do nothing
    }
    if (empty($creds)) {
      return FALSE;
    }
    $response = ding_provider_invoke('user', 'set_favourite', $creds['name'], $branchId);
    return $response;
  }
}

/**
 * Translate and return a bibdk_favourite standard error message
 *
 * @return null|string
 */
function _bibdk_favourite_set_error_text() {
  return t('bibdk_favourite_something_went_wrong', array(), array('context' => 'bibdk_favourite'));
}

/**
 * Translate and return a bibdk_favourite standard success message
 *
 * @return null|string
 */
function _bibdk_favourite_set_favourite_text() {
  return t('Favourite library has been set', array(), array('context' => 'bibdk_favourite'));
}

/**
 * Translate and return a bibdk_favourite standard deleted message
 *
 * @return null|string
 */
function _bibdk_favourite_set_delete_text() {
  return t('Favourite library has been deleted', array(), array('context' => 'bibdk_favourite'));
}

