<?php

/**
 * Implements hook_menu().
 */
function bibdk_gdpr_menu() {
  $items['user/%/gdpr'] = array(
    'title' => 'GDPR info',
    'page callback' => 'bibdk_gdpr_callback',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 80,
    'file' => 'bibdk_gdpr.pages.inc',
  );

  $items['bibdk-gdpr-consent'] = array(
    'page callback' => 'bibdk_gdpr_consent_ajax',
    'access callback' => 'user_is_logged_in',
    'file' => 'bibdk_gdpr.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/user-interface/bibdk-gdpr'] = array(
    'title' => 'Bib.dk GDPR configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_gdpr_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'bibdk_gdpr.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function bibdk_gdpr_theme() {
  $path = drupal_get_path('module', 'bibdk_gdpr') . '/theme';
  $bibdk_gdpr_theme_array = array(
    'bibdk_gdpr_theme' => array(
      'variables' => array('header' => NULL, 'intro' => NULL, 'values' => NULL, 'extro' => NULL, 'print_button_value' => NULL),
      'path' => $path,
      'template' => 'bibdk_gdpr_template',
    ),
    'bibdk_gdpr_item_theme' => array(
      'variables' => array('header' => NULL, 'content' => NULL),
      'path' => $path,
      'template' => 'bibdk_gdpr_item_template',
    ),
  );
  return $bibdk_gdpr_theme_array;
}

/**
 * Implements hook_form_alter().
 */
function bibdk_gdpr_form_bibdk_reservation_create_wizard_form_alter(&$form, &$form_state) {
  if (!empty($form_state['step']) && $form_state['step'] == 2) {
    if (isset($form['userdata']['userParameters']['userfields']['uncheck'])) {
      $alter_form = &$form['userdata']['userParameters']['userfields'];
      $alter_form['uncheck']['#weight'] = -99;
      $alter_form['gdpr'] = array(
        '#markup' => bibdk_gpdr_get_anonymous_txt(),
        '#weight' => -100,
      );
    }
  }
}

/**
 * Get gdpr text for anonymous users
 * @return null|string
 */
function bibdk_gpdr_get_anonymous_txt() {
  return t('bibliotek.dk gemmer dine oplysninger indtil bestillingen er fÃ¦rdigbehandlet af det bibliotek materialet bestilles hos, eller den valgte interessedato er overskredet.', array(), array('context' => 'bibdk_gdpr'));
}

/**
 * Implements hook_user_login().
 */
function bibdk_gdpr_user_login(&$edit, $account) {
  if (ding_user_is_provider_user($account)) {
    if (empty($_SESSION['bibdk_gdpr_consent'])) {
      $_SESSION['bibdk_gdpr_consent'] = ding_provider_invoke('user', 'get_gdpr_consent', $account->mail);
    }
  }
}

/**
 * Implements hook_page_alter().
 */
function bibdk_gdpr_page_alter(&$page) {
  global $user;
  if (ding_user_is_provider_user($user)) {
    if (empty($_SESSION['bibdk_gdpr_consent'])) {
      $text = variable_get('bibdk_gdpr_consent_message', array());
      if ($text) {
        $page['content'][] = array(
          '#attached' => array(
            'js' => array(drupal_get_path('module', 'bibdk_gdpr') . '/js/bibdk_gdpr.consent.js'),
          ),
          '#type' => 'container',
          '#attributes' => array(
            'id' => array('bibdk-gdpr-login-modal'),
            'class' => array('element-hidden'),
          ),
          'title' => array(
            '#type' => 'container',
            '#attributes' => array(
              'class' => array('bibdk-modal-header'),
            ),
            'content' => array(
              '#theme' => 'html_tag',
              '#tag' => 'span',
              '#value' => t('You have to give consent to continue', array(), array('context' => 'bibdk_gdpr')),
              '#attributes' => array(
                'class' => array('bibdk-modal-title'),
              ),
            ),
          ),
          'inner' => array(
            '#type' => 'container',
            '#attributes' => array(
              'class' => array('bibdk-modal-content bibdk-gdpr-modal-content'),
            ),
            'checkbox' => array(
              '#type' => 'checkbox',
              '#title' => t('I give consent', array(), array('context' => 'bibdk_gdpr')) . ' ' . '<span class="see-more">' . t('See more', array(), array('context' => 'bibdk_gdpr')) . '</span>',
              '#id' => 'bibdk-gdpr-consent',
            ),
            'message' => array(
              '#type' => 'container',
              '#attributes' => array(
                'class' => array('consent-message'),
              ),
              'value' => array(
                '#markup' => check_markup($text['value'], $text['format']),
              ),
            ),
            'button' => array(
              '#theme' => 'html_tag',
              '#tag' => 'button',
              '#value' => t('Submit', array(), array('context' => 'bibdk_gdpr')),
            ),
          ),
        );
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function bibdk_gdpr_form_user_register_form_alter(&$form, &$form_state) {
  $text = variable_get('bibdk_gdpr_consent_message', array());
  $form['#attributes']['class'][] = 'user-register-form';
  $form['#attached'] = array(
    'js' => array(drupal_get_path('module', 'bibdk_gdpr') . '/js/bibdk_gdpr.consent.js'),
  );
  $form['bibdk_gdpr_consent'] = array(
    '#weight' => 99,
    'bibdk_gdpr_consent' => array(
      '#type' => 'checkbox',
      '#title' => t('I give consent', array(), array('context' => 'bibdk_gdpr')) . ' ' . '<span class="see-more">' . t('See more', array(), array('context' => 'bibdk_gdpr')) . '</span>',
      '#required' => TRUE,
    ),
    'message' => array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('consent-message'),
      ),
      'value' => array(
        '#markup' => check_markup($text['value'], $text['format']),
      ),
    ),
  );
  $form['#submit'][] = 'bibdk_gdpr_user_register_submit';
}

/**
 * Implements hook_user_insert().
 */
function bibdk_gdpr_user_register_submit($form, &$form_state) {
  if ($form_state['values']['bibdk_gdpr_consent']) {
    ding_provider_invoke('user', 'set_gdpr_consent', $form_state['values']['mail'], TRUE);
  }
}

/**
 * Implements hook_bibdk_gdpr_items().
 *
 * @return array
 */
function bibdk_gdpr_bibdk_gdpr_items() {
  global $user;

  $rows[] = array(
    '#type' => 'container',
    'label' => array(
      '#type' => 'html_tag',
      '#tag' => 'span',
      '#value' => t('label_gdpr_user_email', array(), array('context' => 'bibdk_gdpr'))
    ),
    'value' => array(
      '#type' => 'html_tag',
      '#tag' => 'span',
      '#value' => _bibdk_gdpr_get_id($user)
    ),
  );

  $rows[] = array(
    '#type' => 'container',
    'label' => array(
      '#type' => 'html_tag',
      '#tag' => 'span',
      '#value' => t('label_gdpr_ipaddress', array(), array('context' => 'bibdk_gdpr'))
    ),
    'value' => array(
      '#type' => 'html_tag',
      '#tag' => 'span',
      '#value' => _bibdk_gdpr_get_ip()
    ),
  );

  $form['#user_category'] = 'account';
  if (function_exists('language_negotiation_get')) {
    // While running tests, locale_language_selector_form() throw an error:
    //   'Call to undefined function language_negotiation_get()'.
    locale_language_selector_form($form, $form_state, $user);
    foreach ($form['locale']['language']['#options'] as $key => $val) {
      if ($form['locale']['language']['#default_value'] == $key) {
        $rows[] = array(
          '#type' => 'container',
          'label' => array(
            '#type' => 'html_tag',
            '#tag' => 'span',
            '#value' => t('label_gdpr_language', array(), array('context' => 'bibdk_gdpr'))
          ),
          'value' => array(
            '#type' => 'html_tag',
            '#tag' => 'span',
            '#value' => $val
          ),
        );
      }
    }
  }

  $items['bibdk_gdpr']['#weight'] = 10;
  $items['bibdk_gdpr']['#header'] = t('label_gdpr_bibdk_gdpr', array(), array('context' => 'bibdk_gdpr'));
  $items['bibdk_gdpr']['#theme'] = 'bibdk_gdpr_item_theme';
  $items['bibdk_gdpr']['#content'] = $rows;

  return $items;
}

/**
 * Returns the current users email if the user is logged in.
 * Otherwise returns 'anonymous' to indicate the user isn't logged in.
 *
 * @param stdClass $user
 * @return string
 */
function _bibdk_gdpr_get_id($user) {
  return (user_is_logged_in()) ? $user->mail : 'anonymous';
}

/**
 * Retrieves the users ip
 *
 * @return string
 */
function _bibdk_gdpr_get_ip() {
  if (!empty($_SERVER['HTTP_CLIENT_IP'])) {
    $ip = $_SERVER['HTTP_CLIENT_IP'];
  }
  elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
    $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];
  }
  else {
    $ip = $_SERVER['REMOTE_ADDR'];
  }
  return $ip;
}

