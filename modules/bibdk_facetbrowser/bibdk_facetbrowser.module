<?php
/**
 * @file
 * Main file for the bibdk_facetbrowser module.
 */

require_once(drupal_get_path('module', 'bibdk_facetbrowser') . '/includes/bibdk_facetbrowser.mobile.inc');
require_once(drupal_get_path('module', 'bibdk_facetbrowser') . '/includes/bibdk_facetbrowser.filter_form.inc');
//require_once('includes/bibdk_facetbrowser_help_texts.inc');


/**
 * Implements hook_menu()
 */
function bibdk_facetbrowser_menu() {
  $items['admin/config/ting/facets'] = array(
    'title' => 'Ting facets',
    'description' => 'Configure facets.',
    'weight' => -20,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_facetbrowser_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'bibdk_facetbrowser.admin.inc',
  );

  $items['admin/config/ting/facets/%/delete'] = array(
    'title' => 'Delete facets',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_facetbrowser_delete_facet', 4),
    'access arguments' => array('administer site configuration'),
    'file' => 'bibdk_facetbrowser.admin.inc',
    'type' => MENU_CALLBACK,
  );


  $items['bibdk_facetbrowser/filter/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_facetbrowser_filter_form', 2),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  $items['bibdk_facetbrowser/ajax/facets'] = array(
    'title' => 'facets',
    'description' => 'Get facets by ajax',
    'page callback' => 'bibdk_facetbrowser_facets_by_ajax',
    'access arguments' => array('access content'),
  );


  $items['bibdk_facetbrowser/ajax/facetgroup/%'] = array(
    'title' => 'facets',
    'description' => 'Get facet group by ajax',
    'page callback' => 'bibdk_facetbrowser_get_facet_group_by_ajax',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
  );



  return $items;
}


/**
 * Get a single facetgroup
 * @param $facet_name
 *   name of the facetgroup to retrieve
 */
function bibdk_facetbrowser_get_facet_group_by_ajax($facet_name) {
  if (module_exists('ting_openformat')) {
    $results = ting_openformat_get_facet_group($facet_name);
  }
  $form = drupal_get_form('bibdk_facetbrowser_form', $results->facets);
  $markup = drupal_render($form[$facet_name]);
  drupal_json_output(array('markup' => $markup));
  drupal_exit();
}

/**
 * Implements hook_theme()
 *
 * @return array
 */
function bibdk_facetbrowser_theme() {
  $path = drupal_get_path('module', 'bibdk_facetbrowser') . '/theme';
  return array(
    'theme_bibdk_facetbrowser' => array(
      'variables' => array(
        'facets' => NULL,
        'searchkey' => NULL,
      ),
    ),
    'theme_bibdk_facetbrowser_mobile' => array(
      'variables' => array(
        'facets' => NULL,
        'searchkey' => NULL,
      ),
    ),
    'theme_facets_mobile' => array(
      'render element' => 'form',
      'path' => $path,
      'template' => 'facetbrowser-mobile',
    ),
    'theme_facet_term_names' => array(
      //'render element' => 'form',
      'variables' => array(
        'facet_id' => '',
        'selected_facets' => FALSE,
      ),
      'path' => $path,
      'template' => 'facetbrowser-term-names',
    ),
    'theme_facet_term_selected' => array(
      'render element' => 'form',
      'path' => $path,
      'template' => 'facetbrowser-term-selected',
    ),

    'bibdk_facetbrowser_settings' => array(
      'render element' => 'form',
      'file' => 'bibdk_facetbrowser.admin.inc',
    ),

    'bibdk_facetbrowser_multicolumns_checkboxes' => array(
      'render element' => 'element',
      'path' => $path,
      'template' => 'facetbrowser-filter-form-element',
    ),
  );
}


/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types.
 */
function bibdk_facetbrowser_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}


/**
 * Implement hook_ctools_plugin_api().
 */
function bibdk_facetbrowser_ctools_plugin_api($module, $api) {
  if ($module == 'panels_mini' && $api == 'panels_default') {
    return array('version' => 1);
  }
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}


/**
 * @param $facet
 * @param $title
 * @return array; render-array(fieldset) defining a single facetgroup
 */
function bibdk_facetbrowser_get_single_facetgroup($facet, $title, &$selected_facets_present=FALSE) {
  $default_values = array();
  $selected = array();
  $not_selected = array();

  $field_set = array();

  if (count($facet->terms) > 0) {
    $field_set = array(
      '#type' => 'fieldset',
      '#title' => t($title, array(), array('context' => 'facet_titles')),
      '#attributes' => array(
        'id' => str_replace('.', '-', $facet->name),
        'data-name' => array($facet->name),
        'data-count' => count($facet->terms)
      ),
    );

    // reference parameter
    $selected_facets_present = FALSE;
    $facet_name = explode('.', $facet->name);
    $element_name = end($facet_name);

    foreach ($facet->terms as $term_name => $term_count) {
      if (_bibdk_facetbrowser_isFacetSet($facet->name, $term_name) === TRUE) {
        $selected_facets_present = TRUE;
        $default_values[] = $term_name;
        $selected[$term_name] = bibdk_facetbrowser_get_facet_link($facet, $term_name, $term_count, TRUE);
      }
      else {
        $not_selected[$term_name] = bibdk_facetbrowser_get_facet_link($facet, $term_name, $term_count, FALSE);
      }
    }
    $field_set[$element_name] = array(
      '#type' => 'checkboxes',
      '#options' => $selected + $not_selected, // nb: array_merge() renumber numeric keys. I.e. year facet
      '#default_value' => $default_values,
    );
  }

  return $field_set;
}

/**
 *
 * @param $facet
 *   stdObject; the facet to handle
 * @param $name
 *   string; name of the facet
 * @param $count
 *   int; number of facets in group
 * @param bool|FALSE $hidden
 *   hidden or not
 * @return string
 *   link to new search with facet selected
 */
function bibdk_facetbrowser_get_facet_link($facet, $name, $count, $hidden = FALSE) {
  $facet_name = explode('.', $facet->name);
  $element_name = end($facet_name);
  // only translate material type
  if ($element_name == 'type') {
    $term_name_title = t($name, array(), array('context' => 'material_type'));
  }
  else {
    $term_name_title = $name;
  }

  $hit_txt = '(' . $count . ' ' . _bibdk_facetbrowser_hits_label($count) . ')';
  $term_name_short = bibdk_facetbrowser_trim_facet_txt($term_name_title, $hit_txt);

  global $base_root;
  $facets_string = $facet->name . ':' . $name;
  $uri = _bibdk_facetbrowser_parseRequestUri();

  $link = array(
    '#theme' => 'link',
    '#text' => $term_name_short . ' <span class="count">' . $hit_txt . '</span>',
    '#path' => $base_root . _bibdk_facetbrowser_parseSelectionUri($uri, $facets_string),
    '#options' => array(
      'attributes' => array(
        'title' => $term_name_title,
        'data-hidden' => ($hidden) ? '1' : '0',
      ),
      'html' => TRUE,
      'query' => ($hidden) ? array() : array(
        'facets' => array('' => $facets_string),
      ),
    ),
  );

  return drupal_render($link);
}

/**
 * Trim text to max 25 chars
 * @param $name
 * @param $count
 * @return string
 */
function bibdk_facetbrowser_trim_facet_txt($name, $count) {
  $total = strlen($name . $count);
  if ($total < 35) {
    return $name;
  }
  $name = mb_substr($name, 0, 30-strlen($count) );
  return $name . '...';
}

function bibdk_facetbrowser_get_filter_link($facet) {
  $container = array(
    '#type' => 'container',
    '#attributes' => array(
      'data-expand' => 'select',
      'class' => array(
        'select',
      ),
    ),
  );

  $container['icon'] = array(
    '#type' => 'html_tag',
    '#tag' => 'span',
    '#value' => '+',
    '#attributes' => array(
      'class' => array(
        'icon',
        'icon-left',
        'icon-blue-down'
      ),
    ),
  );

  $container['link'] = array(
    '#theme' => 'link',
    '#text' => t('label_facet_select_unselect', array(), array('context' => 'bibdk_facetbrowser')),
    '#path' => 'bibdk_facetbrowser/filter/' . $facet->name,
    '#options' => array(
      'attributes' => array(
        'class' => array(drupal_html_class('facetbrowser_filter_link')),
      ),
      'html' => FALSE,
    ),
  );
  return $container;
}


/**
 * Create a custom form with checkbox elements for facets and ajax callback
 *
 * @param array $form
 * @param array $form_state
 * @param array $facets
 * @return array $form
 */
function bibdk_facetbrowser_form($form, &$form_state, $facets = FALSE, $search = FALSE) {
  global $base_root;
  $fragment = 'content';
  $form['#attributes']['data-uri'] = $base_root . _bibdk_facetbrowser_parseRequestUri();

  $form['search_key'] = array(
    '#type' => 'hidden',
    '#value' => $search,
    '#attributes' => array(
      'data-uri' => $base_root . _bibdk_facetbrowser_parseRequestUri()
    ),
  );

  $form['selected'] = array(
    '#type' => 'fieldset',
    '#title' => t('label_facets_selected', array(), array('context' => 'facet_titles')),
    '#attributes' => array(
      'id' => 'selected-terms',
      'class' => array('hidden'),
      'data-count' => NULL,
    ),
  );

  $form['deselected'] = array(
    '#type' => 'fieldset',
    '#title' => t('label_facets_deselected', array(), array('context' => 'facet_titles')),
    '#attributes' => array(
      'id' => 'deselected-terms',
      'class' => array('hidden'),
      'data-count' => NULL,
    ),
  );

  foreach (variable_get('bibdk_facetbrowser_facets', array()) as $configured_facet) {
    if (isset($facets[$configured_facet['name']])) {
      $facet = $facets[$configured_facet['name']];
      $selected_facets_present = FALSE;
      $field_set = bibdk_facetbrowser_get_single_facetgroup($facet, $configured_facet['title'], $selected_facets_present);
      if (!empty($field_set)) {
        $field_set['actions'] = bibdk_facetbrowser_set_actions($facet->name, $selected_facets_present);
        $field_set['filter'] = bibdk_facetbrowser_get_filter_link($facet);
        $form[$facet->name] = $field_set;
      }
    }
  }

  $request_uri_facets = _bibdk_facetbrowser_getFacets();

  if ($selected = _bibdk_facetbrowser_isFacetSelected($request_uri_facets, TRUE)) {
    foreach ($selected as $term_selected) {
      $uri = _bibdk_facetbrowser_parseRequestUri();
      // only translate material type
      if ($term_selected['name'] == 'facet.type') {
        $term_name_title = t($term_selected['value'], array(), array('context' => 'material_type'));
      }
      else {
        $term_name_title = $term_selected['value'];
      }
      $show_selected_options[$term_selected['facet_string']] = l($term_name_title, $base_root . _bibdk_facetbrowser_parseSelectionUri($uri, $term_selected['facet_string']), array(
        'html' => TRUE,
        'fragment' => $fragment,
        'attributes' => array(
          'title' => $term_name_title,
          'data-hidden' => '0',
        ),
      ));
      $show_selected_options_defaults[] = $term_selected['facet_string'];
    }
    // populate 'selected' fieldset
    $form['selected']['show_selected_facets'] = array(
      '#type' => 'checkboxes',
      '#theme' => 'theme_facet_term_selected',
      '#options' => $show_selected_options,
      '#default_value' => $show_selected_options_defaults,
    );
    $form['selected']['#attributes']['class'] = array();
    $form['selected']['#attributes']['data-count'] = count($selected);
  }

  if ($deselected = _bibdk_facetbrowser_isFacetSelected($request_uri_facets, FALSE)) {
    foreach ($deselected as $term_deselected) {
      $uri = _bibdk_facetbrowser_parseRequestUri();
      // only translate material type
      if ($term_deselected['name'] == 'facet.type') {
        $term_name_title = t($term_deselected['value'], array(), array('context' => 'material_type'));
      }
      else {
        $term_name_title = $term_deselected['value'];
      }
      $show_deselected_options[$term_deselected['facet_string']] = l($term_name_title, $base_root . _bibdk_facetbrowser_parseSelectionUri($uri, $term_deselected['facet_string']), array(
        'html' => TRUE,
        'fragment' => $fragment,
        'attributes' => array(
          'title' => $term_name_title,
          'data-hidden' => '0',
        ),
      ));
      $show_deselected_options_defaults[] = $term_deselected['facet_string'];
    }
    // populate 'deselected' fieldset
    $form['deselected']['show_deselected_facets'] = array(
      '#type' => 'checkboxes',
      '#theme' => 'theme_facet_term_selected',
      '#options' => $show_deselected_options,
      '#default_value' => $show_deselected_options_defaults,
    );
    $form['deselected']['#attributes']['class'] = array();
    $form['deselected']['#attributes']['data-count'] = count($deselected);
  }

  return $form;
}


/**
 * Get a render array to display actions (show more/less)
 * @see theme/facetbrowser-term-names.tpl.php
 * @param $id
 * @param $selected_facets
 * @return array
 */
function bibdk_facetbrowser_set_actions($id, $selected_facets) {
  return array(
    '#theme' => 'theme_facet_term_names',
    '#facet_id' => drupal_html_id($id),
    '#selected_facets' => $selected_facets,
  );
}

/**
 * Check if selected facet from url matches the one from params.
 *
 * @param String $term_cat
 * @param String $term_name
 * @return Boolean
 */
function _bibdk_facetbrowser_isFacetSet($term_cat, $term_name) {
  $facets = _bibdk_facetbrowser_getFacets();
  foreach ($facets as $facet) {
    if (preg_replace('/facets\[\d*\]=/i', '', $facet) == $term_cat . ':' . $term_name) {
      return TRUE;
    }
  }

  return FALSE;
}


/**
 * Get selected, or deselected, facets from params. Return arry, or FALSE if none found.
 *
 * @param array $facets
 * @param boolean $is_selected
 * @return array or FALSE
 */
function _bibdk_facetbrowser_isFacetSelected($facets, $is_selected = TRUE) {

  $selected = array();
  $deselected = array();

  foreach ($facets as $facet) {
    $facet_string_array = explode('=', $facet, 2);
    if (!empty($facet_string_array[1])) {
      $item_array = explode(':', $facet_string_array[1], 2);
      if (substr($facet_string_array[1], 0, 1) == '!') {
        if (!empty($item_array[1])) {
          $deselected_item['name'] = substr($item_array[0], 1);
          $deselected_item['value'] = $item_array[1];
          $deselected_item['facet_string'] = substr($facet_string_array[1], 1);
          $deselected[] = $deselected_item;
        }
      }
      else {
        if (!empty($item_array[1])) {
          $selected_item['name'] = $item_array[0];
          $selected_item['value'] = $item_array[1];
          $selected_item['facet_string'] = $facet_string_array[1];
          $selected[] = $selected_item;
        }
      }
    }
  }

  if ($is_selected) {
    if (sizeof($selected) > 0) {
      return $selected;
    }
  }
  else {
    if (sizeof($deselected) > 0) {
      return $deselected;
    }
  }

  return FALSE;

}


/**
 * Get params from query URI.
 *
 * @return array
 */
function _bibdk_facetbrowser_getFacets() {
  $facets = & drupal_static('bibdk_facetbrowser_facets');
  if (!isset($facets)) {
    //$by_ajax = variable_get('bibdk_facetbrowser_by_ajax', FALSE);
    //if ($by_ajax) {


      $uri = $_SESSION['latest_search']['request_uri'];
      $request_uri_parts = explode('?', $uri);
    //}
    //else {
      //$request_uri_parts = explode('?', request_uri());
    //}

    $facets = explode('&', rawurldecode(end($request_uri_parts)));
    drupal_static('bibdk_facetbrowser_facets', $facets);
  }
  return $facets;
}


/**
 * Check the URI and drop pager parameter, if available.
 *
 * @return String
 */
function _bibdk_facetbrowser_parseRequestUri() {
  if (isset($_SESSION['latest_search']['request_uri'])) {
    $uri = $_SESSION['latest_search']['request_uri'];
  }
  else {
    $uri = request_uri();
  }
  $new_query_part = array();
  if (stristr($uri, '?')) {
    $request_uri_parts = explode('?', $uri);
    $query = end($request_uri_parts);
    $query_parts = explode('&', $query);
    foreach ($query_parts as $key => $part) {
      if (preg_match('/^page\=/', $part) || $part == 'full_view=1') {
        unset($query_parts[$key]);
        continue;
      }
      $new_query_part[] = $part;
    }
    $query = $new_query_part;

    return $request_uri_parts[0] . '?' . implode('&', $query);
  }
  else {
    return $uri;
  }
}

/**
 * Drop the selected (or deselected) facet from the URI.
 *
 * @return String
 */
function _bibdk_facetbrowser_parseSelectionUri($uri, $facet) {
  $new_query_part = array();
  if (stristr($uri, '?')) {
    $request_uri_parts = explode('?', $uri);
    $query = end($request_uri_parts);
    $query_parts = explode('&', $query);
    foreach ($query_parts as $key => $part) {
      $pos = strpos(urldecode($part), urldecode($facet));
      if ($pos !== FALSE) {
        // ex: facets[]=facet.language%3Afransk
        unset($query_parts[$key]);
        continue;
      }
      $new_query_part[] = $part;
    }
    $query = $new_query_part;

    return $request_uri_parts[0] . '?' . implode('&', $query);
  }
  else {

    return $uri;
  }
}

/**
 * Implements hook_block_info
 * @return mixed
 */
function bibdk_facetbrowser_block_info() {
  // facetbrowser activation link for mobile.
  $blocks['bibdk_works_controls_facets_link'] = array(
    'info' => t('Bibdk: Mobile facets link'),
    'description' => t('Link to show facets on mobile devices'),
  );
  return $blocks;
}


/**
 * Implements hook_block_view()
 *
 * @return Array
 * See also: bibdk_facetbrowser ctools content_type
 */
function bibdk_facetbrowser_block_view($delta = FALSE) {
  $block = array();

  if ($delta == 'bibdk_works_controls_facets_link') {
    // facetbrowser activation link for mobile.
    $text = t('View facets', array(), array('context' => 'bibdk_frontend'));
    $js[] = drupal_get_path('module', 'bibdk_facetbrowser') . '/js/facetbrowser.mobile.js';

    $block['content'] = array(
      '#theme' => 'link',
      '#text' => $text,
      '#path' => 'bibdk_modal/facetgroups',
      '#options' => array(
        'attributes' => array(
          'id' => 'selid-bibdk-facets-mobile',
          'class' => array('bibdk-facets-mobile', ''),
          'title' => $text,
          'data-reveal-id' => 'bibdk-modal',
          'data-reveal-ajax' => 'true',
        ),
        'html' => FALSE,
      ),
      '#attached' => array(
        'js' => $js,
      ),
    );
  }

  return $block;
}


/**
 * facetbrowser theme function
 *
 * @param array $all_facets
 * @return string
 */
function theme_theme_bibdk_facetbrowser($search_result = FALSE) {
  $all_facets = array_shift($search_result);
  $searchkey = array_shift($search_result);
  $elements = array();
  if (is_array($all_facets)) {
    $form = drupal_get_form('bibdk_facetbrowser_form', $all_facets, $searchkey);
  }

  return drupal_render($form);
}


/** Get a placeholder to get facets by ajax
 * @return array
 */
function bibdk_facetbrowser_facetbrowser_placeholder() {
  $form = array(
    'placeholder' => array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('bibdk_facetbrowser_facets_placeholder'),
      )
    ),
  );

  return $form;
}


/**
 * function for hitcount label
 *
 * @param integer $count
 * @return string
 */
function _bibdk_facetbrowser_hits_label($count = 0) {
  if ($count > 1) {
    return t('hits', array(), array('context' => 'bibdk_facetbrowser'));
  }
  return t('hit', array(), array('context' => 'bibdk_facetbrowser'));
}


function bibdk_facetbrowser_facets_by_ajax() {
  $by_ajax = variable_get('bibdk_facetbrowser_by_ajax', FALSE);
  if ($by_ajax) {
    $client = new ting_client_class();
    $params = $_SESSION['latest_search']['params'];
    $results = new stdClass();
    $results->search_key = $_SESSION['latest_search']['search_key'];
    $results->cacheKey = $_SESSION['latest_search']['cache_key'];

    if (module_exists('ting_openformat')) {
      _ting_openformat_facet_cache($client, $results, $params);
    }

    $markup = theme('theme_bibdk_facetbrowser', array(
      $results->facets,
      (!empty($results->search_key) ? $results->search_key : NULL)
    ));

    drupal_json_output(array('markup' => $markup));
  }
  drupal_exit();
}


