<?php
/**
 * @file
 * Bibliotek.dk search carousel tests.
 */

/**
 * Class BibdkCarouselUnitTestCase
 */
class BibdkCarouselUnitTestCase extends DrupalUnitTestCase {

  public static function getInfo() {
    return array(
      'name' => t('Bibliotek.dk search carousel - Unittest'),
      'description' => t('Testing Bibliotek.dk search carousel functionality'),
      'group' => t('Bibliotek.dk - Frontend'),
    );
  }

  public function setUp() {
    module_load_include('module', 'ting_search_carousel');
    parent::setUp('ting_search_carousel', 'bibdk_search_carousel');
  }

}

/**
 * Class BibdkCarouselWebtestCase
 */
class BibdkCarouselWebtestCase extends DrupalWebTestCase {

  protected $privileged_user;

  public static function getInfo() {
    return array(
      'name' => t('Bibliotek.dk search carousel - Webtest'),
      'description' => t('Testing Bibliotek.dk search carousel functionality'),
      'group' => t('Bibliotek.dk - Frontend'),
    );
  }

  public function setUp() {
    parent::setUp('ting_search_carousel', 'bibdk_search_carousel', 'ting_openformat', 'ting_covers');
    variable_set('ting_search_url', 'http://lakiseks.dbc.dk/openbibdk/0.5/');
    variable_set('bibdk_provider_security_code', 'testhest');
    variable_set('search_active_modules', array('ting_openformat' => 'ting_openformat'));
    variable_set('search_default_module', 'ting_openformat');
    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', 'search content'));
    menu_rebuild();
  }

  public function testRunner() {
    // Create and log in our privileged user.
    $this->privileged_user = $this->drupalCreateUser(array(
      'administer search',
      'administer blocks',
      'search content',
      'administer site configuration',
      'access administration pages',
    ));
    $this->drupalLogin($this->privileged_user);

    $this->_testCarouselBlock();
    $this->_testSearchSettings();
    $this->_testBibdkSettings();
    $this->_test_bibdk_search_carousel_admin_form_alter();
    $this->_test_bibdk_search_carousel_ting_search_carousel_query();
    return TRUE;
  }

  private function _testCarouselBlock() {

    $this->drupalPost('admin/structure/block', array('blocks[ting_search_carousel_ting_search_carousel][region]' => 'content'), t('Save blocks'));
    $this->assertText('The block settings have been updated.', t('The block settings have been updated.'));

    $this->drupalGet('');
    $this->assertRaw('<div class="rs-carousel-inner">', t('Carousel is present at frontpage'));

  }

  private function _testSearchSettings() {

    $this->drupalPost('admin/config/ting/ting_search_carousel/search_settings', array('ting_search_carousel_covers_max' => '10'), t('Save configuration'));
    $this->assertText('The configuration options have been saved', t('The maximum covers configuration have been saved.'));

    $this->drupalPost('admin/config/ting/ting_search_carousel/search_settings', array('ting_search_carousel_queries_max' => '100'), t('Save configuration'));
    $this->assertText('The configuration options have been saved', t('The maximum queries configuration have been saved.'));

  }

  private function _testBibdkSettings() {

    $this->drupalPost('admin/config/ting/ting_search_carousel/bibdk_settings', array('bibdk_search_carousel_dateformat' => '10'), t('Save configuration'));
    $this->assertText('The configuration options have been saved', t('The date format configuration have been saved.'));

    $this->drupalPost('admin/config/ting/ting_search_carousel/bibdk_settings', array('bibdk_search_carousel_week_search_code' => '100'), t('Save configuration'));
    $this->assertText('The configuration options have been saved', t('The week search code configuration have been saved.'));

  }

  /**
   * Testing form_alter of carousel admin form.
   */
  public function _test_bibdk_search_carousel_admin_form_alter() {
    $form_state = array();
    $form['ting_search_carousel']['ting_searches']['search_0'] = array();

    $period = array(
      '#title' => 'Period',
      '#type' => 'select',
    );

    $offset = array(
      '#title' => 'Offset',
      '#type' => 'select',
    );

    bibdk_search_carousel_form_ting_search_carousel_admin_form_alter($form, $form_state, 'ting-search-carousel-admin-form');

    $this->assertEqual(
      $form['ting_search_carousel']['ting_searches']['search_0']['bibdk_search_carousel']['period[]']['#title'] . '+' . $form['ting_search_carousel']['ting_searches']['search_0']['bibdk_search_carousel']['period[]']['#type'],
      $period['#title'] . '+' . $period['#type'],
      'Period select added to carousel form.'
    );

    $this->assertEqual(
      $form['ting_search_carousel']['ting_searches']['search_0']['bibdk_search_carousel']['offset[]']['#title'] . '+' . $form['ting_search_carousel']['ting_searches']['search_0']['bibdk_search_carousel']['offset[]']['#type'],
      $offset['#title'] . '+' . $offset['#type'],
      'Offset select added to carousel form.'
    );

    $this->assertEqual($form['#submit'], array('bibdk_search_carousel_search_submit'), 'Custom submit function set.');
  }

  /**
   * Testing form_alter of carousel admin form.
   */
  public function _test_bibdk_search_carousel_ting_search_carousel_query() {
    $query['query'] = 'foo';
    $query['period'] = 2;
    $query['offset'] = 3;

    $new_query = bibdk_search_carousel_ting_search_carousel_query($query);

    $bibdk_dateformat  = variable_get('bibdk_search_carousel_dateformat', 'bk\mYW');
    $bibdk_search_code = variable_get('bibdk_search_carousel_week_search_code', 'dkcclterm.kk');

    $today = time();
    $week = 7 * 24 * 60 * 60; // 7 days; 24 hours; 60 mins; 60secs

    $periods = array();
    for ($n = 0; $n < $query['period']; $n++) {
      $weeks = $week * ( $n + $query['offset'] );
      $periods[] = date($bibdk_dateformat, $today - $weeks);
    }
    $expected_query = 'foo and ' . $bibdk_search_code . '=(' . implode(' or ', $periods) . ')';

    $this->assertEqual($expected_query, $new_query['query'], 'Query string formatted correctly.');
  }


}
