<?php

/**
 * @file bibdk_netarchive.module
 * Add link to archived pdf articles of Ting objects
 */


/**
 * Implementation of hook_menu().
 */
function bibdk_netarchive_menu() {

  $items['moreinfo/netarchive/%'] = array(
    'title' => '',
    'page callback' => 'bibdk_netarchive_moreinfo_callback',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type'  => MENU_NORMAL_ITEM,
  );

  return $items;

}


/**
 * Implementation of hook_theme().
 */
function bibdk_netarchive_theme() {
  return array(
    'bibdk_netarchive_link' => array(
      'render element' => 'elements',
      'template' => 'theme/bibdk-netarchive-link',
    ),
    'bibdk_netarchive_error' => array(
      'render element' => 'elements',
      'template' => 'theme/bibdk-netarchive-error',
    ),
  );
}


/**
 * webarchive page callback
 * @param string $local_id openSearch record identifier
 * @return mixed. PDF file or html error message
 */
function bibdk_netarchive_moreinfo_callback($local_id = NULL) {

  $for_tit = $archive_path = '';

  if ( !$local_id ) {
    return t('pdf ID is missing', array(), array('context' => 'bibdk_netarchive:error'));
    watchdog('netarchive', 'Netarchive PDF was called with empty ID.', array(), WATCHDOG_ERROR);
  }

  require_once('lib/fpdf/fpdf.php');
  require_once('lib/fpdi/fpdi.php');

  $local_id = urldecode($local_id);

  // get bibliographic data
  if ( $bibdata = bibdk_netarchive_search($local_id) ) {
    // get netarchive pdf
    $archive_path = open_moreinfo_object_path($local_id, 'netarchivePdfUrl');
    if ( !$archive_path ) {
      watchdog('netarchive', 'Netarchive PDF return empty path.', array(), WATCHDOG_ERROR);
    }
    if ( !empty($bibdata['creator']) ) {
      $bibdata['creator'] = $bibdata['creator'] . ' : ';
    }
    $for_tit = strip_tags($bibdata['creator']) . strip_tags($bibdata['title']);
    if ( !$for_tit ) {
      watchdog('netarchive', 'Netarchive PDF return empty creator and title.', array(), WATCHDOG_ERROR);
    }
  }

  if ( !$for_tit || !$archive_path || !file_exists($archive_path) ) {
    $items = array(
      '#theme' => 'bibdk_netarchive_error',
      '#bibdk_netarchive_error' => t("netarchive_cover_error @for_tit", array('@for_tit' => $for_tit), array('context' => 'bibdk_netarchive:error')),
    );
    return drupal_render($items);
  }

  try {

    // initiate FPDI
    $pdf = new FPDI();

    // add a page
    $pdf->AddPage();

    $pdf->SetXY(0, 40);
    $pdf->SetFont('Times','',32);
    $pdf->Cell(0, 0, t("netarchive_cover_header", array(), array('context' => 'bibdk_netarchive')), 0, 0, 'C');

    $pdf->SetXY(0, 70);
    $pdf->SetFont('Times','',24);
    $pdf->Cell(0, 0, t("netarchive_cover_leadtext", array(), array('context' => 'bibdk_netarchive')), 0, 0, 'C');

    $pdf->ln(10);
    $pdf->MultiCell(0, 15, utf8_decode($for_tit), 0, 'C');

    $pdf->SetXY(0, 200);
    $pdf->SetFont('Times','',16);
    $pdf->MultiCell(0, 8, t("netarchive_cover_footer", array(), array('context' => 'bibdk_netarchive')), 0, 'C');

    // set the source file
    $page_count = $pdf->setSourceFile($archive_path);

    for ( $n=1; $n <= $page_count; $n++ ) {
      $tplIdx = $pdf->importPage($n);
      $pdf->AddPage();
      // use the imported page and place it at point 0, 0
      $pdf->useTemplate($tplIdx, 0, 0);
    }

    $pdf->Output();

  }
  catch ( fpdfSystemExit $e ) {

    // pdfi "apron" failed. Return original
    if ( file_exists($archive_path) ) {
      $src = $GLOBALS['base_url'] . '/sites/default/files/moreinfo/netarchivePdfUrl/' . md5($local_id) . '.pdf';
      $output =
        '<object data="' . $src . '?page=1&amp;view=Fit" type="application/pdf" width="590" height="890"><p>' .
        t('It appears you don\'t have a PDF plugin for this browser. No biggie... you can <a href="'. $src . '">click here to download the PDF file.</a>', array('@src' => $src), array('context' => 'ting_covers:error')) .
        '</p></object>';
      return $output;
    } else {
      return t("pdf \"@lid\" not found.", array('@lid' => $local_id), array('context' => 'ting_covers:error'));
    }

  }

}



/**
 * openSearch record lookup
 * @param string $local_id openSearch record identifier
 * @return mixed. Array or FALSE
 */
function bibdk_netarchive_search($local_id) {

  $works = ting_openformat_get_manifestations(array($local_id));

  $work = reset($works);
  $manifestations = $work->getManifestations();

  if ( !count($manifestations) ) {
    return array('title'=>'','creator'=>'');
  }

  foreach ( $manifestations as $manifestation ) {
    $item['title'] = _ting_openformat_parse_element($manifestation->getTitle());
    $item['creator'] = _ting_openformat_parse_element($manifestation->getCreator());
    $item['pid'] = ( !empty($manifestation->id) ) ? $manifestation->id : FALSE;
    if ($item['pid']) {
      $i = explode(':', $item['pid']);
      $item['lok'] = $i[0];
      $item['lid'] = $i[1];
    }
  }

  return $item;

}



/** Implements hook_ting_openformat_actions
 * Add actions to work, subwork and manifestations
 * @param $type
 * @param $entity
 * @param $view_mode
 * @param $langcode
 * @return array
 */
function bibdk_netarchive_ting_openformat_actions($type, $entity, $view_mode, $langcode){

  if ( $type == 'bibdkManifestation' && method_exists($entity, 'getWebArchive') && $entity->getWebArchive() ){

    $local_id = urlencode($entity->ding_entity_id);

    // return render array for netarchive link:
    $options = array(
      'attributes' => array(
        'title' => t('netarchive link'),
        'id' => drupal_html_id('netarchive-' . $local_id),
        'class' => array('netarchive'),
      ),
      'html' => TRUE,
    );

    $netarchive_link = array(
      '#text' => t('label_netarchive_link', array(), array('context' => 'bibdk_covers')),
      '#path' => 'moreinfo/netarchive/' . $local_id,
      '#options' => $options,
    );

    $element['netarchive'] = array(
      '#markup' => theme('bibdk_netarchive_link', array('elements' => $netarchive_link)),
      '#weight' => -1,
    );

    return $element;

  }

}


