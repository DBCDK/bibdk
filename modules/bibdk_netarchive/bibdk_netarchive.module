<?php

/**
 * @file bibdk_netarchive.module
 * Add link to archived pdf articles of Ting objects
 */


/**
 * Implementation of hook_menu().
 */
function bibdk_netarchive_menu() {

  $items['moreinfo/netarchive/%'] = array(
    'title' => '',
    'page callback' => 'bibdk_netarchive_moreinfo_callback',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;

}


/**
 * Implementation of hook_theme().
 */
function bibdk_netarchive_theme() {
  return array(
    'bibdk_netarchive_link' => array(
      'render element' => 'elements',
      'template' => 'theme/bibdk-netarchive-link',
    ),
    'bibdk_netarchive_error' => array(
      'render element' => 'elements',
      'template' => 'theme/bibdk-netarchive-error',
    ),
  );
}


/**
 * webarchive page callback
 * @param string $local_id openSearch record identifier
 * @return mixed. PDF file or html error message
 */
function bibdk_netarchive_moreinfo_callback($local_id = NULL) {

  $for_tit = $archive_path = '';

  if (!$local_id) {
    watchdog('netarchive', 'Netarchive PDF was called with empty ID.', array(), WATCHDOG_ERROR);
    return t('pdf ID is missing', array(), array('context' => 'bibdk_netarchive:error'));
  }

  $local_id = urldecode($local_id);

  // get bibliographic data
  if ($bibdata = bibdk_netarchive_search($local_id)) {
    // get netarchive pdf
    $archive_path = open_moreinfo_object_path($local_id, 'netarchivePdfUrl');
    // It can be an array due to Netpunkt.
    $archive_path = is_array($archive_path) ? $archive_path[0] : $archive_path;
    if (!$archive_path) {
      watchdog('netarchive', 'Netarchive PDF return empty path.', array(), WATCHDOG_ERROR);
    }
    if (!empty($bibdata['creator'])) {
      $bibdata['creator'] = $bibdata['creator'] . ' : ';
    }
    $for_tit = strip_tags($bibdata['creator']) . strip_tags($bibdata['title']);
    if (!$for_tit) {
      watchdog('netarchive', 'Netarchive PDF return empty creator and title.', array(),
        WATCHDOG_ERROR);
    }
  }
  if (!$for_tit || !$archive_path || !file_exists($archive_path)) {
    $items = array(
      '#theme' => 'bibdk_netarchive_error',
      '#bibdk_netarchive_error' => t("netarchive_cover_error @for_tit",
        array('@for_tit' => $for_tit), array('context' => 'bibdk_netarchive:error')),
    );
    return drupal_render($items);
  }

  if (file_exists($archive_path)) {
    $splitted_archive_path = explode("/", $archive_path);

    $src = $GLOBALS['base_url'] . '/sites/default/files/moreinfo/netarchivePdfUrl/' . end($splitted_archive_path);
    $output = '<object data="' . $src .
      '?page=1&amp;view=Fit" type="application/pdf" width="590" height="890"><p>' .
      t('It appears you don\'t have a PDF plugin for this browser. No biggie... you can <a href="' .
        $src . '">click here to download the PDF file.</a>', array('@src' => $src),
        array('context' => 'ting_covers:error')) . '</p></object>';
    return $output;
  }
  else {
    return t("pdf \"@lid\" not found.", array('@lid' => $local_id),
      array('context' => 'ting_covers:error'));
  }
}


/**
 * openSearch record lookup
 * @param string $local_id openSearch record identifier
 * @return mixed. Array or FALSE
 */
function bibdk_netarchive_search($local_id) {
  $works = ting_openformat_get_manifestations(array($local_id));
  $work = reset($works);
  $manifestations = $work->getManifestations();

  if (!count($manifestations)) {
    return array('title' => '', 'creator' => '');
  }

  // use the first manifestation ??
  /** @var Manifestation $manifestation */
  $manifestation = reset($manifestations);
  $item = array();
  $item['title'] = $manifestation->getTitle();
  $creators = $manifestation->getCreator();
  // also use the first creator found - hopefully there are not more than one
  $item['creator'] = $creators[0]['creator'][0][0]['display'];
  $item['pid'] = (!empty($manifestation->id)) ? $manifestation->id : FALSE;
  if ($item['pid']) {
    $i = explode(':', $item['pid']);
    $item['lok'] = $i[0];
    $item['lid'] = $i[1];
  }
  return $item;
}


/**
 * Implements hook_ting_openformat_actions
 * Add actions to work, subwork and manifestations
 *
 * @param $type
 * @param $entity
 * @param $view_mode
 * @param $langcode
 *
 * @return array|void
 * @throws \Exception
 */
function bibdk_netarchive_ting_openformat_actions($type, $entity, $view_mode, $langcode) {

  if ($type == 'bibdkManifestation' && method_exists($entity, 'getWebArchive') &&
    $entity->getWebArchive()) {

    $local_id = urlencode($entity->ding_entity_id);

    // return render array for netarchive link:
    $options = array(
      'attributes' => array(
        'title' => t('netarchive link'),
        'id' => drupal_html_id('netarchive-' . $local_id),
        'class' => array('netarchive'),
      ),
      'html' => TRUE,
    );

    $netarchive_link = array(
      '#text' => t('label_netarchive_link', array(), array('context' => 'bibdk_covers')),
      '#path' => 'moreinfo/netarchive/' . $local_id,
      '#options' => $options,
    );

    $element['netarchive'] = array(
      '#markup' => theme('bibdk_netarchive_link', array('elements' => $netarchive_link)),
      '#weight' => -1,
    );

    return $element;

  }

}
