<?php

/**
 * Add Audit Trail for Bibliotek.dk
 */

/**
 * @param string $action
 * @param string $user_id
 * @param array $access_info
 */
function bibdk_audit_trail_submit_data($action, $user_id, $access_info) {

  global $user;
  $info = libraries_load('audit');
  if ($info['audit'] !== FALSE && $info['audit'] !== 0) {

    if (class_exists('DBC\AT\AuditTrail')) {
      if (isset($_SESSION['heimdal']) && !empty($_SESSION['heimdal'])) {
        // This is not about the account being watched or edited - but who is looking.
        $token = (isset($_SESSION['heimdal']['access_token']) && !empty($_SESSION['heimdal']['access_token'])) ?
          $_SESSION['heimdal']['access_token'] : $user->uid;
        $ipAddress = ip_address();
        watchdog(
          'bibdk_audit_trail', 'TOKEN: @token IPADDRESS: @ipaddress ACCESS: @access USERID: @userid ACTION: @action',
          [
            '@token' => $token,
            '@ipaddress' => $ipAddress,
            '@access' => json_encode($access_info),
            '@userid' => $user_id,
            '@action' => $action
          ],
          WATCHDOG_INFO
        );
        /*
        try {
          DBC\AT\AuditTrail::log(
            $token,
            ((!is_array($ipAddress)) ? [$ipAddress] : $ipAddress),
            'BibliotekDK',
            $action,
            $user_id,
            $access_info
          );
        } catch (Exception $e) {
          watchdog('bibdk_audit_trail', $e->getMessage(), [], WATCHDOG_ERROR);
        }
        */
      } else {
        watchdog('bibdk_audit_trail', 'Heimdal not found in session', [], WATCHDOG_ERROR);
      }
    } else {
      watchdog('bibdk_audit_trail', 'AuditTrail class not found', [], WATCHDOG_ERROR);
    }
  } else {
    watchdog('bibdk_audit_trail', 'libraries_load is false or zero', [], WATCHDOG_ERROR);
  }
}

/**
 * Implements hook_user_update().
 *
 * @param $edit
 * @param $account
 * @param $category
 */
function bibdk_audit_trail_user_update(&$edit, $account, $category) {

  $data = ['account_uid' => $account->uid];
  bibdk_audit_trail_submit_data('write', $account->uid, $data);

}

/**
 * Implements hook_user_load().
 */
function bibdk_audit_trail_user_load($users) {
  foreach($users AS $user) {
    $data = [];
    bibdk_audit_trail_submit_data('read', $user->uid, $data);
  }
}

/**
 * Implements hook_libraries_info().
 */
function bibdk_audit_trail_libraries_info() {
  $libraries['audit'] = array(
    'name' => 'Audit Trail',
    'vendor url' => 'https://dbc.dk',
    'version callback' => 'bibdk_audit_trail_version_callback',
    'files' => array(
      'php' => array(
        'src/AuditTrail.php',
      ),
    ),
  );

  return $libraries;
}

function bibdk_audit_trail_version_callback() {
  return TRUE;
}
