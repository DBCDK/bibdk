<?php

/**
 * Add Audit Trail for Bibliotek.dk
 */

/**
 * @param string $action
 * @param string $user_id
 * @param array $access_info
 */
function bibdk_audit_trail_submit_data($action, $user_id, $access_info) {

  global $user;
  $info = libraries_load('audit');
  if ($info !== FALSE && $info !== 0) {
    if (class_exists('DBC\AT\AuditTrail')) {
      if (isset($_SESSION['heimdal']) && !empty($_SESSION['heimdal'])) {
        // This is not about the account being watched or edited - but who is looking.
        $token = (isset($_SESSION['heimdal']['access_token']) && !empty($_SESSION['heimdal']['access_token'])) ?
          $_SESSION['heimdal']['access_token'] : $user->uid;
        $ipAddress = ip_address();
        try {
          DBC\AT\AuditTrail::log(
            $token,
            ((!is_array($ipAddress)) ? [$ipAddress] : $ipAddress),
            'BibliotekDK',
            $action,
            $user_id,
            $access_info
          );
        } catch (Exception $e) {
          watchdog('bibdk_audit_trail', $e->getMessage(), [], WATCHDOG_ERROR);
        }
      } else {
        watchdog('bibdk_audit_trail', 'Heimdal not found in session', [], WATCHDOG_ERROR);
      }
    } else {
      watchdog('bibdk_audit_trail', 'AuditTrail class not found', [], WATCHDOG_ERROR);
    }
  } else {
    watchdog('bibdk_audit_trail', 'libraries_load is false or zero', [], WATCHDOG_ERROR);
  }
}

/**
 * Implements hook_user_update().
 *
 * @param $edit
 * @param $account
 * @param $category
 */
function bibdk_audit_trail_user_update(&$edit, $account, $category) {
  bibdk_audit_trail_submit_data('write', $account->uid, _bibdk_audit_trail_access_info($account));
}

/**
 * Implements hook_user_load().
 */
function bibdk_audit_trail_user_load($users) {
  foreach($users AS $user) {
    bibdk_audit_trail_submit_data('read', $user->uid, _bibdk_audit_trail_access_info($user));
  }
}

function _bibdk_audit_trail_access_info($user) {
  return [
    'account_uid' => $user->uid,
    'account_mail' => $user->mail,
    'account_name' => $user->name,
    'current_path' => current_path()
  ];
}

/**
 * Implements hook_libraries_info().
 */
function bibdk_audit_trail_libraries_info() {
  $libraries['audit'] = array(
    'name' => 'Audit Trail',
    'vendor url' => 'https://dbc.dk',
    'version callback' => 'bibdk_audit_trail_version_callback',
    'files' => array(
      'php' => array(
        'src/AuditTrail.php',
      ),
    ),
  );

  return $libraries;
}

function bibdk_audit_trail_version_callback() {
  return TRUE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function bibdk_audit_trail_form_bibdk_reservation_create_wizard_form_alter(&$form, &$form_state) {
  $form['#validate'][] = 'bibdk_audit_trail_bibdk_reservation_create_wizard_form_validate';
}

function bibdk_audit_trail_bibdk_reservation_create_wizard_form_validate($form, &$form_state) {
  watchdog('bibdk_audit_trail', 'validate function used', [], WATCHDOG_INFO);
}
