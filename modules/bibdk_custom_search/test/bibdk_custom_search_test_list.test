<?php


class BibdkCustomSearchListTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Custom Search List Test',
      'description' => 'Tests list functionality',
      'group' => 'Bibliotek.dk  - Custom Search',
    );
  }

  public function setUp() {

    module_enable(array('bibdk_custom_search_ting_openformat_mockup'));
    menu_rebuild();

    parent::setUp('bibdk_custom_search','ting_openformat' ,'bibdk_custom_search_ting_openformat_mockup');
    variable_set('ting_search_url', $this->getAbsoluteUrl('ting_openformat_webservice'));
    variable_set('bibdk_provider_security_code', 'testhest');
    variable_set('search_active_modules', array('ting_openformat' => 'ting_openformat'));
    variable_set('search_default_module', 'ting_openformat');
    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array(
      'access content',
      'search content'
    ));
    menu_rebuild();
    $this->privileged_user = $this->drupalCreateUser(array(
      'administer bibdk custom search pages',
      'administer search',
      'administer blocks',
      'search content',
    ));
  }

  public function tearDown(){
    module_disable(array('bibdk_custom_search_ting_openformat_mockup'));
    parent::tearDown();
  }


  public function testRunner() {
    $page = $this->_addElements();
    $this->testLinkIsPresent($page);
    //$this->testPopUpWindowIsPresent($page);
    //$this->testNoDuplets($page);
    //$this->testSelectOptionsPresent($page);
    //$this->testInvalidFacet($page);
    //$this->testEmptySearchCode($page);
    // Create and log in our privileged user.
  }

  private function testLinkIsPresent($page){
    $this->drupalGet($page);
    $this->assertLink('see all options');
  }

  private function testNoDuplets($page){
    $this->assertNoText('<option value="test-value-2">test-value-1</option>');
    $this->assertNoText('<label class="option" for="edit-test-searchcode-test-value-1">test-value-1 </label>');
  }

  private function testSelectOptionsPresent($page){
    // Test to see if options are present
    $this->assertRaw('<option value="test-value-2">test-value-2</option>');
    $this->assertRaw('<option value="test-value-3">test-value-3</option>');
  }

  private function testInvalidFacet($page){
    db_update('bibdk_custom_search_options')->fields(array('value' => 'facet.invalid'))->condition('value', 'facet.type', '=')->execute();
    db_truncate('cache')->execute();
    $this->drupalGet($page);
    $this->assertNoLink('see all options');
  }

  private function testEmptySearchCode($page){
    db_update('bibdk_custom_search_options')->fields(array('value' => 'term.type=facet.type'))->condition('value', 'facet.invalid', '=')->execute();
    db_truncate('cache')->execute();
    $this->drupalGet($page);
    $this->assertLink('see all options');
    $this->assertRaw('<option value="test-value-2">test-value-2</option>');
    $this->assertRaw('<option value="test-value-3">test-value-3</option>');
  }


  /**
   * Add test element
   */
  private function _addElements() {
    $this->drupalLogin($this->privileged_user);

    // CREATE OBJECTS

    // Create page
    $edit = array();
    $edit['bibdk_custom_search[0][page_title]'] = 'test_page_title';
    $this->drupalPost('admin/config/search/bibdk_custom_search', $edit, 'Save');

    // Create Element
    $edit = array();
    $edit['bibdk_custom_search_page_elements[0][element_title]'] = 'test_element_title';
    $this->drupalPost('admin/config/search/bibdk_custom_search/elements', $edit, 'Save');

    // create value
    $edit = array();
    $edit['bibdk_custom_search[0][value_title]'] = 'test_element_value';
    $this->drupalPost('admin/config/search/bibdk_custom_search/values', $edit, 'Save');


    // Edit value
    $this->clickLink('edit');
    $edit = array();
    $edit['element_value[value_type]'] = 'checkboxes';
    $edit['element_value[search_code]'] = 'test_searchcode';
    $this->drupalPost(NULL, $edit, 'Save');

    // Create option
    $edit = array();
    $edit['element_value[value_type]'] = 'checkboxes';
    $edit['element_value_options[0][label]'] = 'full_list_view';
    $edit['element_value_options[0][value]'] = 'facet.type';
    $this->drupalPost(NULL, $edit, 'Save');

    // Create option
    $edit = array();
    $edit['element_value[value_type]'] = 'checkboxes';
    $edit['element_value_options[1][label]'] = 'test_label';
    $edit['element_value_options[1][value]'] = 'test-value-1';
    $this->drupalPost(NULL, $edit, 'Save');

    // ADD ELEMENT TO FRONTPAGE

    // Get the element uuid from db
    $value = db_select('bibdk_custom_search_elements', 't')
      ->fields('t', array('e_uuid'))->condition('element_title', 'test_element_title', '=')->execute()
      ->fetchAssoc();

    $this->drupalGet('admin/config/search/bibdk_custom_search');

    $this->clickLink('edit');
    $edit = array();
    $frontpage = variable_get('site_frontpage', 'node');
    $edit['page[menu_title]'] = 'test_menu_title';
    $edit['page[page_path]'] = $frontpage;
    $edit['elements[0][e_uuid]'] = $value['e_uuid'];
    $edit['elements[0][region]'] = 'main';

    $this->drupalPost(null, $edit, 'Save');

    $this->clickLink('edit');

    // get value uuid from db
    $value = db_select('bibdk_custom_search_values', 't')
      ->fields('t', array('v_uuid'))->condition('value_title', 'test_element_value', '=')->execute()
      ->fetchAssoc();

    $edit = array(
      'bibdk_custom_search_page_element_values[0][v_uuid]' => $value['v_uuid'],
    );

    $this->drupalPost(null, $edit, 'Save');

    return $frontpage;
  }

}
