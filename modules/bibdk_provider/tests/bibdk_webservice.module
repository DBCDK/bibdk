<?php

define('SOAP_FAULT', -1);

function bibdk_webservice_menu() {
  $item['bibdk_webservice'] = array(
    'page callback' => 'bibdk_webservice_request',
    'access callback' => 'bibdk_webservice_access',
    'delivery callback' => 'bibdk_webservice_delivery',
  );
  $item['bibdk_webservice_test'] = array(
    'page callback' => 'bibdk_webservice_test',
    'access callback' => 'bibdk_webservice_access',
  );

  return $item;
}

function bibdk_webservice_test() {
  return '<form name="test" action="bibdk_webservice" method="POST" target="_blank"><textarea name="xml"></textarea><input type="submit" name="sub" value="submit"/></form>';
}

function bibdk_webservice_request($reset = false) {
  static $cart;
  if ($reset)
    $cart = 0;

  if (isset($_POST['xml'])) {
    $data = rawurldecode($_POST['xml']);
  }
 else {
    $data = file_get_contents('php://input');
  }

  try {
    $envelope = new SimpleXMLElement($data);
    $body = $envelope->children('SOAP-ENV', TRUE);
    $request = $body->Body->children('oui', TRUE);

    switch ($request->getName()) {
      case 'loginRequest':
        return bibdk_webservice_loginRequest($request);
      break;

      case 'loginWayfRequest':
        return bibdk_webservice_loginWayfRequest($request);
      break;

      case 'verifyUserRequest':
        return bibdk_webservice_verifyUserRequest($request);
      break;
      case 'verifyWayfRequest':
        return bibdk_webservice_verifyWayfRequest($request);
      break;
      case 'getCartRequest':
        return bibdk_webservice_get_cart($request, $cart);
        break;
      case 'getCartCountRequest':
        return bibdk_webservice_get_cart_count($request, $cart);
        break;
      case 'addCartContentRequest':
        $cart = 'content';
        return bibdk_webservice_add_cart_content($request);
        break;
      case 'removeCartContentRequest':
        $cart = 'no_content';
        return bibdk_webservice_remove_cart_content($request);
        break;
      case 'updateCartContentRequest':
        return bibdk_webservice_update_cart_content($request);
        break;
      case 'getFavouritesRequest':
        return bibdk_webservice_get_favourites($request);
        break;
      case 'bindWayfRequest':
        return bibdk_webservice_bindWayfRequest($request);
        break;
      default:
     case 'deleteWayfRequest':
        return bibdk_webservice_deleteWayfRequest($request);
        break;
      default:
        return SOAP_FAULT;
    }
  }
  catch (Exception $e) {
    return SOAP_FAULT;
  }
}

/**
 * Method for to favourites
 * used by bibdk_openuserstatus_webtest.test
 * @param $request
 * @return string
 */
function bibdk_webservice_get_favourites($request) {
  $path = drupal_get_path('module', 'bibdk_webservice');
  return file_get_contents($path . '/xml/get_favourite_libraries.xml');
}

function bibdk_webservice_get_cart($request, $cart = null){
  $path = drupal_get_path('module', 'bibdk_webservice');
  $username = (string) $request->getCartRequest->userId;
  if ($username == 'good_user'){
    if ($cart == 'no_content')
      return file_get_contents($path.'/xml/get_cart_no_results.xml');
    else if ($cart == 'content')
      return file_get_contents($path.'/xml/get_cart_one_result.xml');
    else
      return file_get_contents($path.'/xml/get_cart_results.xml');
  } else {
    return file_get_contents($path.'/xml/get_cart_no_results.xml');
  }
}

function bibdk_webservice_get_cart_count($request){
  $path = drupal_get_path('module', 'bibdk_webservice');
  $username = (string) $request->getCartCountRequest->userId;
  if ($username == 'cart_count_user') {
    return file_get_contents($path . '/xml/get_cart_count_response.xml');
  }
}

function bibdk_webservice_add_cart_content($request){
  $path = drupal_get_path('module', 'bibdk_webservice');
  $username = (string) $request->addCartContentRequest->userId;
  $content = $request->addCartContentRequest->cartContent->cartContentElement;
  if ($username == 'good_user' && $content = '123456789'){
    return file_get_contents($path.'/xml/add_cart_content_result.xml');
  } else {
    return file_get_contents($path.'/xml/add_cart_content_fail.xml');
  }
}

function bibdk_webservice_remove_cart_content($request){
  $path = drupal_get_path('module', 'bibdk_webservice');
  $username = (string) $request->removeCartContentRequest->userId;
  $content = $request->removeCartContentRequest->cartContent->cartContentElement;
  if ($username == 'good_user' && $content = '123456789'){
    return file_get_contents($path.'/xml/remove_cart_content_result.xml');
  } else {
    return file_get_contents($path.'/xml/add_cart_content_fail.xml');
  }
}

function bibdk_webservice_update_cart_content($request){
  $path = drupal_get_path('module', 'bibdk_webservice');
  $username = (string) $request->updateCartContentRequest->userId;
  $content = $request->updateCartContentRequest->cartContent->cartContentElement;
  $status = $request->updateCartContentRequest->cartContent->cartContentStatus;
  if ($username == 'good_user' && $content == '123456789' && $status == 'reservation_complete'){
    return file_get_contents($path.'/xml/update_cart_content_result.xml');
  }
}


/**
 * Detect wrong or missing security code
 */
function bibdk_webservice_security_code_error($securityCode) {
  if ($securityCode != 'securityCode') {
    return '<oui:error>authentication error</oui:error>';
  }
  else {
    return FALSE;
  }
}

function bibdk_webservice_access() {
  return TRUE;
}

function bibdk_webservice_delivery($page_callback_result) {
  if (isset($page_callback_result) && is_null(drupal_get_http_header('Content-Type'))) {
    drupal_add_http_header('Content-Type', 'text/xml; charset=utf-8');
  }

  if ($page_callback_result === NULL) {
    return;
  }
  elseif (is_int($page_callback_result)) {
    switch ($page_callback_result) {
      case SOAP_FAULT:
        echo '<?xml version="1.0" encoding="utf-8"?><SOAP-ENV:Fault xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope"><faultcode>SOAP-ENV:Server</faultcode><faultstring>Incorrect SOAP envelope or wrong/unsupported request</faultstring></SOAP-ENV:Fault>';
        return;
      break;
      default:
        $soap_body = $page_callback_result;
    }
  }
  elseif (is_string($page_callback_result)) {
    $soap_body = $page_callback_result;
  }
  else {
    $soap_body = var_export($page_callback_result, TRUE);
  }

  print '<?xml version="1.0" encoding="utf-8"?><SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope" xmlns:oui="http://oss.dbc.dk/ns/openuserinfo"><SOAP-ENV:Body>'
    . $soap_body
    . '</SOAP-ENV:Body></SOAP-ENV:Envelope>';
}

/**
 * Serves request of type:
 *   <loginRequest>
 *     <userId>dummy@dbc.dk</userId>
 *     <userPinCode>secretpassword</userPinCode>
 *     <securityCode>securityCode</securityCode>
 *   </loginRequest>
 *
 * @param (SimpleXMLElement) $request
 *   Object containing loginRequest
 *
 * @return
 *   string containing <loginResponse> xml
 */
function bibdk_webservice_loginRequest($request) {
  $username = (string) $request->loginRequest->userId;
  $password = (string) $request->loginRequest->userPinCode;

  if ($security = bibdk_webservice_security_code_error((string) $request->loginRequest->securityCode)) {
    $response = $security;
  }
  elseif ($username && $password) {
    if ($userId = _bibdk_webservice_lookup_user($username, $password)) {
      $response = "<oui:userId>$userId</oui:userId>";
    }
    else {
      $response = '<oui:error>Wrong username or password</oui:error>';
    }
  }
  else {
    $response = '<oui:error>No userid or no password given</oui:error>';
  }
  return "<oui:loginResponse>$response</oui:loginResponse>";
}

function bibdk_webservice_loginWayfRequest($request) {
  $username = (string) $request->loginWayfRequest->userId;
  $password = (string) $request->loginWayfRequest->loginId;

 if ($username && $password) {
    if ($userId = _bibdk_webservice_wayf_lookup_user($username, $password)) {
      $response = "<oui:userId>$userId</oui:userId>";
    }
    else {
      $response = '<oui:error>Wrong username or password</oui:error>';
    }
  }
  else {
    $response = '<oui:error>No userid or no password given</oui:error>';
  }
  return "<oui:loginWayfResponse>$response</oui:loginWayfResponse>";
}


function bibdk_webservice_verifyUserRequest($request) {
  $username = (string) $request->verifyUserRequest->userId;

  switch ($username) {
    case 'existing_user_no_bind@dbc.dk' :
    case 'existing_user@dbc.dk' :
      $result = 'TRUE';
      break;
    case 'new_user@dbc.dk' :
      $result = 'FALSE';
      break;
    default :
      $result = 'FALSE';
  }
  if ($result){
    return "<oui:verifyUserResponse><oui:verified>$result</oui:verified></oui:verifyUserResponse>";
  }

}

function bibdk_webservice_verifyWayfRequest($request) {
  $username = (string) $request->verifyWayfRequest->loginId;

  switch ($username) {
    case 'WAYF-test-ID' :
      $result = 'existing_user@dbc.dk';
      break;
    case 'WAYF-test-ID-new-bind' :
      $result = 'existing_user_no_bind@dbc.dk';
      break;
  }
  if ($result){
    return "<oui:verifyWayfResponse><oui:userId>$result</oui:userId></oui:verifyWayfResponse>";
  }
  else {
    return "<oui:verifyWayfResponse><oui:error>WAYF: no such user</oui:error></oui:verifyWayfResponse>";
  }

}

function bibdk_webservice_bindWayfRequest($request) {
  $username = (string) $request->bindWayfRequest->userId;

  return '<oui:bindWayfResponse xmlns:oui="http://oss.dbc.dk/ns/openuserinfo"><oui:userId>' . $username . '</oui:userId></oui:bindWayfResponse>';
}

function bibdk_webservice_deleteWayfRequest($request) {
  $username = (string) $request->deleteWayfRequest->userId;

  return '<oui:deleteWayfResponse xmlns:oui="http://oss.dbc.dk/ns/openuserinfo"><oui:userId>' . $username . '</oui:userId></oui:deleteWayfResponse>';
}


/**
 * Emulating looking up user credentials
 *
 * @param $username
 *   id of the user
 * @param $password
 *   password of the user
 *
 * @return
 *   id of the user upon succes otherwise FALSE
 */
function _bibdk_webservice_lookup_user($username, $password) {
  $users = array(
    array(
      'user' => 'dummy@dbc.dk',
      'password' => 'secretPassword',
    ),
    array(
      'user' => 'good_user',
      'password' => 'pass',
    ),
    array(
      'user' => 'existing_user@dbc.dk',
      'password' => 'pass',
    ),
    array(
      'user' => 'existing_user_no_bind@dbc.dk',
      'password' => 'pass',
    ),
  );

  foreach ($users as $user) {
    if ($user['user'] == $username && $user['password'] == $password) {
      return $username;
    }
  }

  return FALSE;
}

function _bibdk_webservice_wayf_lookup_user($username, $password) {
  $users = array(
    array(
      'user' => 'dummy@dbc.dk',
      'password' => 'WAYF-test-ID',
    ),
    array(
      'user' => 'existing_user_no_bind@dbc.dk',
      'password' => 'WAYF-test-ID-new-bind',
    ),
    array(
      'user' => 'existing_user@dbc.dk',
      'password' => 'WAYF-test-ID',
    ),
  );

  foreach ($users as $user) {
    if ($user['user'] == $username && $user['password'] == $password) {
      return $username;
    }
  }

  return FALSE;
}
