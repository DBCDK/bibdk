<?php

class BibdkProviderUnitTest extends DrupalUnitTestCase {

  private $enable_logging;

  public static function getInfo() {
    return array(
      'name' => 'bibdk user provider client unittest',
      'description' => 'Interface to web service',
      'group' => 'Bibliotek.dk - Provider',
    );
  }

  public function setUp() {
    $this->enable_logging = variable_get('bibdk_provider_enable_logging');
    $this->cart_response_path = drupal_get_path('module', 'bibdk_webservice');
    variable_set('bibdk_provider_enable_logging', 0);
    module_load_include('php', 'bibdk_provider', 'tests/nanosoapmock');
    module_load_include('php', 'bibdk_provider', 'BibdkUser');
    parent::setUp();
  }

  public function tearDown() {
    variable_get('bibdk_provider_enable_logging', $this->enable_logging);
    parent::tearDown();
  }

  public function testCart() {
      NanoSOAPClient::$cart_response_path = $this->cart_response_path;

      $result = BibdkUser::instance()->getCart('good_user');
      $this->assertFalse(preg_match('@cartContentElement@', $result['response']), 'Cart is empty');
      $result = BibdkUser::instance()->addCartContent('good_user', '123456789');

      $result = BibdkUser::instance()->getCart('good_user');
      $this->assertTrue(preg_match('@cartContentElement@', $result['response']), 'Cart element has been added');
      $result = BibdkUser::instance()->removeCartContent('good_user', '123456789');
      $result = BibdkUser::instance()->getCart('good_user');
      $this->assertFalse(preg_match('@cartContentElement@', $result['response']), 'Cart element has been removed');
  }

  public function testVerify() {
    $client = BibdkUser::instance();
    $validUser = $client->verify('validUser');
    $this->assertTrue($validUser, 'Got valid user');
  }

  public function testVerifyInvalid() {
    $client = BibdkUser::instance();
    $invalidUser = $client->verify('invalidUser');
    $this->assertFalse($invalidUser, 'Got invalid user');
  }

  public function testCreateUser() {
    $client = BibdkUser::instance();
    $validUser = $client->create('createUser', '123456');
    $this->assertTrue($validUser, 'User created');
  }

  public function testCreateInvalidUser() {
    $client = BibdkUser::instance();
    $invalidUser = $client->create('invalidUser', '123456');
    $this->assertFalse($invalidUser, "Can't create user");
  }

  public function testLogin() {
    $client = BibdkUser::instance();
    $validUser = $client->login('validUser', '123456');
    $this->assertTrue($validUser, 'User logged in');
    $invalidUser = $client->login('invalidUser', '123456');
    $this->assertFalse($invalidUser, "Can't login");
  }

  public function testUpdateUser() {
    $client = BibdkUser::instance();
    $validUser = $client->update_password('updateUser', '123456');
    $this->assertTrue($validUser, 'User updated');
    $invalidUser = $client->update_password('invalidUser', '123456');
    $this->assertFalse($invalidUser, "Can't update user");
  }

  public function testDeleteUser() {
    $client = BibdkUser::instance();
    $validUser = $client->delete('deleteUser');
    $this->assertTrue($validUser, 'User deleted');
    $invalidUser = $client->delete('');
    $this->assertFalse($invalidUser, "Can't delete user");
  }

  public function testLoginWayf() {
    $client = BibdkUser::instance();
    try {
      $validUser = $client->loginWayf('validUser', 'wayfid12345');
    } catch (Exception $e) {
      $validUser = FALSE;
    }
    $this->assertTrue($validUser, 'Logged in using WAYF');

    try {
      $invalidUser = $client->loginWayf('invalidUser', 'wayfid54321');
      $error = '';
    } catch (Exception $e) {
      $error = $e->getMessage();
    }
    $this->assertEqual($error, 'no such user', 'Failed logging in using WAYF');

    try {
      $noBindUser = $client->loginWayf('noBindUser', 'wayfid54321');
      $error = '';
    } catch (Exception $e) {
      $error = $e->getMessage();
    }
    $this->assertEqual($error, 'no binding', 'User has no WAYF bind');
  }

  public function testBindWayf() {
    $client = BibdkUser::instance();
    try {
      $validUser = $client->bindWayf('validUser', 'wayfid12345');
    } catch (Exception $e) {
      $validUser = FALSE;
    }
    $this->assertTrue($validUser, 'Bound username with WAYF');

    try {
      $invalidUser = $client->bindWayf('invalidUser', 'wayfid54321');
      $error = '';
    } catch (Exception $e) {
      $error = $e->getMessage();
    }
    $this->assertEqual($error, 'no such user', 'Failed to bind WAYF for nonexisting user.');
  }

  public function testDeleteWayf() {
    $client = BibdkUser::instance();
    try {
      $validUser = $client->deleteWayf('validUser');
    } catch (Exception $e) {
      $validUser = FALSE;
    }
    $this->assertTrue($validUser, 'Deleted WAYF binding for user.');

    try {
      $invalidUser = $client->deleteWayf('invalidUser');
      $error = '';
    } catch (Exception $e) {
      $error = $e->getMessage();
    }
    $this->assertEqual($error, 'no such user', 'Failed to delete WAYF for nonexisting user.');
  }

}
