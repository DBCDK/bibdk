<?php
/**
 * @file
 * Code for Bibliotek.dk Autocomplete
 */


/**
 * Implements hook_menu().
 */
function bibdk_autocomplete_menu() {

  $items['bibdk/autocomplete/%/%'] = array(
    'title' => 'Bibliotek.dk autocomplete',
    'description' => 'Autocomplete callback',
    'page callback' => 'bibdk_autocomplete',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
    'file' => 'includes/bibdk_autocomplete.ajax.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/search/bibdk_autocomplete'] = array(
    'title' => 'Bibliotek.dk autocomplete settings',
    'description' => 'Settings for bibliotek.dk autocomplete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_autocomplete_admin'),
    'access arguments' => array('administer search'),
    'file' => 'includes/bibdk_autocomplete.admin.inc',
  );

  $items['bibdk/behaviour/autocomplete'] = array(
    'title' => 'Bibliotek.dk autocomplete behaviour',
    'description' => 'Autocomplete behaviour callback',
    'page callback' => 'bibdk_autocomplete_behaviour_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Implements hook_form_FORM_ID_alter() for form search_block_form.
 */
function bibdk_autocomplete_form_search_block_form_alter(&$form, &$form_state, $form_id) {

  if (!empty($form['page_id']['#value'])) {
    $page_path = $form['page_id']['#value'];
  } else {
    if ($_GET['q']['page_id ']) {
      $page_path = $_GET['q']['page_id '];
    } else {
      $page_path = $_GET['q'];
    }
  }
  $autocomplete_elements = variable_get('bibdk_autocomplete_var', array());
  foreach ($autocomplete_elements as $key => $page) {
    if ($page['page_path'] == $page_path) {
      $vars = $page['vars'];
      $p_uuid = $key;
    }
  }

  if (!empty($vars)) {
    foreach ($vars as $v_uuid => $values) {
      if ($v_uuid == 'search_block_form' && $values['autocomplete'] == TRUE) {
        $form['search_block_form']['#autocomplete_path'] =
          'bibdk/autocomplete/' . $p_uuid . '/search_block_form';
      }
      if (!empty($form['advanced']) && !empty($form['advanced']['main'])) {
        foreach ($form['advanced']['main'] as $element_label => $elements) {
          bibdk_autocomplete_set_path($form, $elements, $element_label, $values, $p_uuid, $v_uuid, 'main');
        }
      }
      if (!empty($form['advanced']) && !empty($form['advanced']['expand'])) {
        foreach ($form['advanced']['expand'] as $element_label => $elements) {
          bibdk_autocomplete_set_path($form, $elements, $element_label, $values, $p_uuid, $v_uuid, 'expand');
        }
      }
    }
    $form['#attached']['js'][] = drupal_get_path('module', 'bibdk_autocomplete') . '/js/bibdk_autocomplete.js';
    $form['#attached']['js'][] = drupal_get_path('module', 'bibdk_autocomplete') . '/js/bibdk_autocomplete_behaviour.js';
  }

}


/**
 * helper function for hook_form_FORM_ID_alter()
 */
function bibdk_autocomplete_set_path(&$form, $elements, $element_label, $values, $p_uuid, $v_uuid, $region = 'main') {
  if (is_array($elements)) {
    foreach ($elements as $element_uuid => $element_val) {
      foreach ($element_val as $element_key => $element_var) {
        if (is_array($element_var) && isset($element_var['#id']) && $element_var['#id'] == $values['id'] && $values['autocomplete']) {
          $form['advanced'][$region][$element_label][$element_uuid][$element_key]['#autocomplete_path'] = 'bibdk/autocomplete/' . $p_uuid . '/' . $v_uuid;
        }
      }
    }
  }
}


/**
 * Implements hook_help().
 */
function bibdk_autocomplete_help($path, $arg) {
  switch ($path) {
    case 'admin/help#bibdk_autocomplete';
      $file = drupal_get_path('module', 'bibdk_autocomplete') . "/help/bibdk_autocomplete.html";
      return $output = file_get_contents($file);
      break;
  }
}


/**
 * Implements hook_0_hit().
 * @return array
 *
 */
function bibdk_autocomplete_0_hit_search($string) {
  $settings = variable_get('bibdk_autocomplete_settings', array());
  $url = variable_get('bibdk_autocomplete_rest_url', null);

  $options['query'] = array('q' => check_plain($string)) + $settings;
  $options['query']['type'] = 'all';
  $url = url($url, $options);

  watchdog('bibdk_autocomplete', 'Autocomplete URL sent: ' . $url, array(), $severity = WATCHDOG_DEBUG);

  $curl = new MicroCURL();
  $headers = array('Accept: application/json');
  $curl->set_option(CURLOPT_HTTPHEADER, $headers);
  $result = json_decode($curl->get(array($url)));
  $curl->close();

  $items = array();
  if (!empty($result->response)) {
    foreach ($result->response->docs as $suggestion) {
      $items[] = $suggestion->all[0];
    }
  } else if (!empty($result->error)) {
    watchdog('bibdk_autocomplete', 'Autocomplete return empty set for ' . $url, array(), $severity = WATCHDOG_WARNING);
  }  
  
  $link_items = bibdk_make_item_list($items);

  return $link_items;
}


/**
 * helper function for 0_hit_search()
 */
function bibdk_make_item_list($items) {

  $links = array();

  // make a list of suggesttions
  foreach ($items as $suggest) {
    $zero_hit_link = array(
      '#theme' => 'link',
      '#path' => 'search/work/' . '"' . $suggest . '"',
      '#weight' => 0,
      '#text' => $suggest,
      '#options' => array(
        'attributes' => array(
          'class' => array(
            'bibdk-suggest-link',
          ),
        ),
        'html' => false,
      ),
    );
    $links[] = drupal_render($zero_hit_link);
  }

  // label for suggestions
  $render['label'] = array(
    '#type' => 'html_tag',
    '#tag' => 'div',
    '#value' => t('label_did_you_mean', array(), array('context' => 'bibdk_autocomplete_suggest')),
    '#attributes' => array(
      'class' => array('bibdk-suggest-label'),
    ),
  );

  // render array for suggestions
  $render['suggest_list'] = array(
    '#theme' => 'item_list',
    '#type' => 'ul',
    '#attributes' => array(
      'class' => array('links'),
      'class' => array('bibdk-suggest-links'),
    ),
    '#items' => $links,
  );

  return $render;

}


/**
 * Implements hook_flush_caches().
 *
 * Defines the cache table to store autocomplete data from the webservice.
 */
function bibdk_autocomplete_flush_caches() {
  return array('cache_bibdk_autocomplete_ortograf');
}


/**
 * Callback for autocomplete behaviour.
 */
function bibdk_autocomplete_behaviour_callback() {
  $behaviour_data = $_POST;
  $settings = variable_get('bibdk_autocomplete_var', array());
  foreach ($behaviour_data['ortograf'] as $key => $fields) {
    if (!isset($fields['suggestions'])) {
      unset($behaviour_data['ortograf'][$key]);
      continue;
    }
    $p_uuid = $fields['pageUuid'];
    $i_uuid = $fields['inputUuid'];
    $type = $settings[$p_uuid]['vars'][$i_uuid]['type'];
    $behaviour_data['ortograf'][$key]['type'] = $type;
    unset($behaviour_data['ortograf'][$key]['id']);
  }
  module_invoke_all('bibdk_behaviour_request', $behaviour_data);
  bibdk_behaviour_log($behaviour_data);
}
