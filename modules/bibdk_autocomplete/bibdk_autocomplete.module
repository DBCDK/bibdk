<?php
/**
 * @file
 * Code for Bibliotek.dk Autocomplete
 */


/**
 * Implements hook_menu().
 */
function bibdk_autocomplete_menu() {

  $items['bibdk/autocomplete/%/%'] = array(
    'title' => 'Bibliotek.dk autocomplete',
    'description' => 'Autocomplete callback',
    'page callback' => 'bibdk_autocomplete',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/search/bibdk_autocomplete'] = array(
    'title' => 'Bibliotek.dk autocomplete settings',
    'description' => 'Settings for bibliotek.dk autocomplete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_autocomplete_admin'),
    'access arguments' => array('administer search'),
    'file' => 'includes/bibdk_autocomplete.admin.inc',
  );

  return $items;
}

/**
 * Callback function used when input is entered in a search field.
 *
 * @param      $p_uuid
 * @param      $v_uuid
 * @param      $string
 * @param bool $retry -- the server tends to respond with a error 500 however
 *                       retrying once seems to fix it most of the times.
 */
function bibdk_autocomplete($p_uuid, $v_uuid, $string, $retry = false) {
  $items = array();
  $settings = variable_get('bibdk_autocomplete_settings', array());
  $url = variable_get('bibdk_autocomplete_rest_url', null);
  $vars = variable_get('bibdk_autocomplete_var', array());
  $value_vars = $vars[$p_uuid]['vars'][$v_uuid];
  unset($value_vars['autocomplete']);
  if (empty($value_vars['index'])) {
    watchdog('bibdk_autocomplete', 'Autocomplete index not defined for value uuid ' . $v_uuid, array(), $severity = WATCHDOG_WARNING);
    drupal_json_output(array());
    drupal_exit();
  }

  $filter_array = bibdk_autocomplete_parse_filters($string);
  $search_string = key($filter_array);
  $filter_string = bibdk_autocomplete_set_filter_query($filter_array[$search_string]);
  if (!empty($filter_string)) {
    if (!empty($value_vars['filterQuery'])) {
      $value_vars['filterQuery'] .= ' AND ' . $filter_string;
    } else {
      $value_vars['filterQuery'] = $filter_string;
    }
  }

  $settings['highlight'] = ($settings['highlight']) ? 'true' : null;
  $options['query'] = array('query' => check_plain($search_string)) + $value_vars + $settings;
  $options['maxTime'] = 300;

  $url = ($value_vars['facetIndex']) ? $url . '/facetSpell' : $url . '/terms';
  $url = url($url, $options);

  watchdog('bibdk_autocomplete', 'Autocomplete URL sent: ' . $url, array(), $severity = WATCHDOG_DEBUG);

  $curl = new MicroCURL();
  $result = json_decode($curl->get(array($url)));
  $curl->close();

  if (!empty($result->suggestions)) {
    foreach ($result->suggestions as $suggestion) {
      $items[bibdk_autocomplete_truncate(html_entity_decode(strip_tags($suggestion->phrase)), 64)] = $suggestion->phrase;
    }
  } else {
    if (empty($result->suggestions) && !$retry) {
      watchdog('bibdk_autocomplete', 'AUTOCOMPLETE RETRY' . $url, array(), $severity = WATCHDOG_WARNING);
      bibdk_autocomplete($p_uuid, $v_uuid, $string, true);
    } else {
      watchdog('bibdk_autocomplete', 'Autocomplete return empty set for ' . $url, array(), $severity = WATCHDOG_WARNING);
      $items = array();
    }
  }
  // Return the result to the form in json
  drupal_json_output($items);
  drupal_exit();
}

function bibdk_autocomplete_parse_filters($filter_string) {
  $search_filter = explode('::::', $filter_string);
  $search_string = $search_filter[0];
  $filter_array = array();
  for ($i = 1; $i < count($search_filter); $i++) {
    $filter = array();
    $elements = explode('$$', $search_filter[$i]);
    $filter['v_uuid'] = $elements[0];
    $filter['p_uuid'] = $elements[1];
    $filter['term'] = $elements[2];
    $filter_array[] = $filter;
  }
  return array($search_string => $filter_array);
}

function bibdk_autocomplete_set_filter_query(array $filters) {
  $filter_query = '';
  $vars = variable_get('bibdk_autocomplete_var', array());
  foreach ($filters as $filter) {
    $values = $vars[$filter['p_uuid']]['vars'][$filter['v_uuid']];
    if (!empty($filter_query)) {
      $filter_query .= ' AND ';
    }
    $filter_query .= $values['facetIndex'] . '=' . '"' . $filter['term'] . '"';
  }
  return $filter_query;
}

/**
 * helper function for bibdk_autocomplete()
 */
function bibdk_autocomplete_truncate($string, $width) {
  $parts = preg_split('/([\s\n\r]+)/', $string, null, PREG_SPLIT_DELIM_CAPTURE);
  $parts_count = count($parts);

  $length = 0;
  $last_part = 0;
  for (; $last_part < $parts_count; ++$last_part) {
    $length += strlen($parts[$last_part]);
    if ($length > $width) {
      break;
    }
  }

  return implode(array_slice($parts, 0, $last_part));
}

/**
 * Implements hook_form_FORM_ID_alter() for form search_block_form.
 */
function bibdk_autocomplete_form_search_block_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['page_id']['#value'])) {
    $page_path = $form['page_id']['#value'];
  } else {
    if ($_GET['q']['page_id ']) {
      $page_path = $_GET['q']['page_id '];
    } else {
      $page_path = $_GET['q'];
    }
  }

  $autocomplete_elements = variable_get('bibdk_autocomplete_var', array());
  foreach ($autocomplete_elements as $key => $page) {
    if ($page['page_path'] == $page_path) {
      $vars = $page['vars'];
      $p_uuid = $key;
    }
  }

  if (!empty($vars)) {
    foreach ($vars as $v_uuid => $values) {
      if (!empty($form['advanced']) && !empty($form['advanced']['main'])) {
        foreach ($form['advanced']['main'] as $element_label => $elements) {
          bibdk_autocomplete_set_path($form, $elements, $element_label, $values, $p_uuid, $v_uuid, 'main');
        }
      }
      if (!empty($form['advanced']) && !empty($form['advanced']['expand'])) {
        foreach ($form['advanced']['expand'] as $element_label => $elements) {
          bibdk_autocomplete_set_path($form, $elements, $element_label, $values, $p_uuid, $v_uuid, 'expand');
        }
      }
    }
  }
  $form['#attached']['js'][] = drupal_get_path('module', 'bibdk_autocomplete') . '/js/bibdk_autocomplete.js';
  return $form;
}

/**
 * helper function for hook_form_FORM_ID_alter()
 */
function bibdk_autocomplete_set_path(&$form, $elements, $element_label, $values, $p_uuid, $v_uuid, $region = 'main') {
  if (is_array($elements)) {
    foreach ($elements as $element_uuid => $element_val) {
      foreach ($element_val as $element_key => $element_var) {
        if (is_array($element_var) && isset($element_var['#id']) && $element_var['#id'] == $values['id'] && $values['autocomplete']) {
          $form['advanced'][$region][$element_label][$element_uuid][$element_key]['#autocomplete_path'] = 'bibdk/autocomplete/' . $p_uuid . '/' . $v_uuid;
        }
      }
    }
  }
}

/**
 * Implements hook_help().
 */
function bibdk_autocomplete_help($path, $arg) {
  switch ($path) {
    case 'admin/help#bibdk_autocomplete';
      $file = drupal_get_path('module', 'bibdk_autocomplete') . "/help/bibdk_autocomplete.html";
      return $output = file_get_contents($file);
      break;
  }
}

/**
 * Implements hook_0_hit().
 * @return array
 *
 */
function bibdk_autocomplete_0_hit_search($conditions) {

  $settings = variable_get('bibdk_autocomplete_settings', array());
  $url = variable_get('bibdk_autocomplete_rest_url', null);

  $value_vars = array();
  $value_vars['index'] = 'scanterm.default';
  $value_vars['facetIndex'] = 'scanphrase.default';

  $url = $url . '/facetSpell';
  $settings['highlight'] = ($settings['highlight']) ? 'true' : null;
  $options['query'] = array('query' => check_plain($conditions)) + $value_vars + $settings;
  $options['maxTime'] = 300;
  $url = url($url, $options);

  $curl = new MicroCURL();
  $result = json_decode($curl->get(array($url)));
  $curl->close();

  $items = array();
  if (!empty($result->suggestions)) {
    foreach ($result->suggestions as $suggestion) {
      $items[bibdk_autocomplete_truncate(html_entity_decode(strip_tags($suggestion->phrase)), 64)] = $suggestion->phrase;
    }
  }
  $link_items = bibdk_make_item_list($items);

  return $link_items;
}

/**
 * helper function for 0_hit_search()
 */
function bibdk_make_item_list($items) {

  $links = array();

  // make a list of suggesttions
  foreach ($items as $suggest) {
    $zero_hit_link = array(
      '#theme' => 'link',
      '#path' => 'search/work/' . $suggest,
      '#weight' => 0,
      '#text' => $suggest,
      '#options' => array(
        'attributes' => array(
          'class' => array(
            'bibdk-suggest-link',
          ),
        ),
        'html' => false,
      ),
    );
    $links[] = drupal_render($zero_hit_link);
  }

  // label for suggestions
  $render['label'] = array(
    '#type' => 'html_tag',
    '#tag' => 'div',
    '#value' => t('label_did_you_mean', array(), array('context' => 'bibdk_autocomplete_suggest')),
    '#attributes' => array(
      'class' => array('bibdk-suggest-label'),
    ),
  );

  // render array for suggestions
  $render['suggest_list'] = array(
    '#theme' => 'item_list',
    '#type' => 'ul',
    '#attributes' => array(
      'class' => array('links'),
      'class' => array('bibdk-suggest-links'),
    ),
    '#items' => $links,
  );

  return $render;

}
