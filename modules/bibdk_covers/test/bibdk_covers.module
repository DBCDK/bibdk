<?php

/**
 * @file bibdk_covers.module
 * Provide functionality and page callbacks for retrieving covers for bibliotek.dk objects and collections
 */

/**
 * Implementation of hook_menu().
 */
function bibdk_covers_menu() {
  $items = array();

  $items['ting/covers'] = array(
    'title' => 'Retreives cover for Ting objects',
    'page callback' => 'bibdk_covers_objects',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'bibdk_covers.pages.inc',
  );

  $items['ting/moreinfo/covers/%/%'] = array(
    'title' => '',
    'page callback' => 'bibdk_covers_moreinfo_cover',
    'page arguments' => array(3,4),
    'access arguments' => array('access content'),
    'type'  => MENU_NORMAL_ITEM,
    'file'  => 'bibdk_covers.pages.inc',
  );

  $items['ting/moreinfo/back_covers/%'] = array(
    'title' => '',
    'page callback' => 'bibdk_covers_moreinfo_backcover',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type'  => MENU_NORMAL_ITEM,
    'file'  => 'bibdk_covers.pages.inc',
  );

/*
  $items['admin/config/ting/covers'] = array(
    'title' => 'Covers',
    'description' => 'Configure how covers are handled.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_covers_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'bibdk_covers.admin.inc',
  );

  $items['admin/config/ting/covers/setttings'] = array(
    'title' => 'Settings',
    'description' => 'Configure how covers are handled.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/config/ting/covers/addi'] = array(
    'title' => 'ADDI service',
    'description' => 'Configure integration with the ADDI service.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_covers_admin_addi_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'bibdk_covers.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
*/

  return $items;
}


function bibdk_covers_admin_paths_alter(&$paths) {
  $paths['ting/moreinfo/covers/*'] = FALSE;
  $paths['ting/moreinfo/covers/*/*'] = FALSE;
  $paths['ting/moreinfo/back_covers/*'] = FALSE;
}

/**
 * Implementation of hook_theme().
 */
function bibdk_covers_theme() {
  return array(
    'ting_object_cover' => array(
      'render element' => 'elements',
      'file' => 'bibdk_covers.theme.inc',
      'template' => 'theme/ting-covers-object',
      'preprocess functions' => array('template_preprocess_ting_object_cover'),
      'attached' => array(
        'js' => array(drupal_get_path('module', 'bibdk_covers') . '/js/ting-covers.js'),
      ),
    ),
  );
}


/**
 * Implementation of hook_cron().
 */
function bibdk_covers_cron() {
  _bibdk_covers_delete_old_files($_SERVER['REQUEST_TIME'] - variable_get('bibdk_covers_cache_lifetime', 86400));
}


/**
 * Implementation of hook_cache_clear().
 */
function bibdk_covers_flush_caches() {
  _bibdk_covers_delete_old_files();
}


/**
 * Implements hook_ding_install_tasks().
 */
function bibdk_covers_ding_install_tasks() {
  module_load_include('inc', 'bibdk_covers', 'bibdk_covers.admin');
  return array(
    'bibdk_covers_admin_addi_settings_form' => array(
      'display_name' => st('ADDI service settings'),
      'type' => 'form',
      'file' => drupal_get_path('module', 'bibdk_covers') . '/bibdk_covers.admin.inc',
    ),
  );
}

/**
 * Template preprocessor.
 */
function bibdk_covers_preprocess_ting_object(&$variables) {
  /*
   * Add the image style as a class, allowing templates to react on the size.
   */
  if (isset($variables['elements']['ting_cover_work'][0])) {
    $variables['classes_array'][] = drupal_html_class('imagestyle-' . $variables['elements']['ting_cover_work'][0]['#image_style']);
  }
  if (isset($variables['elements']['ting_cover_manifestation'][0])) {
    $variables['classes_array'][] = drupal_html_class('imagestyle-' . $variables['elements']['ting_cover_manifestation'][0]['#image_style']);
  }
}

/**
 * Delete ting covers files.
 *
 * @param int $time Timestamp where older files will be deleted.
 *  Obmit or set to NULL to delete all files.
 */
function _bibdk_covers_delete_old_files($time = NULL) {

  //Collect potential locations of cover folders
  $files_dir = file_default_scheme() . '://';
  $image_dirs = array($files_dir);

  $styles_dir = $files_dir . 'styles';
  foreach(scandir($styles_dir) as $style_dir) {
    $style_dir = $styles_dir . DIRECTORY_SEPARATOR . $style_dir . DIRECTORY_SEPARATOR . 'public';
    if (is_dir($style_dir)) {
      $image_dirs[] = $style_dir;
    }
  }

  //Collect cover files
  $cover_files = array();
  foreach ($image_dirs as $uri) {
    $bibdk_covers_dir = $uri . DIRECTORY_SEPARATOR . 'ting' . DIRECTORY_SEPARATOR . 'covers' . DIRECTORY_SEPARATOR . 'frontcover_jpg';
    if (is_dir($bibdk_covers_dir)) {
      $cover_files = array_merge($cover_files, _bibdk_covers_get_files($bibdk_covers_dir));
    }
  }

  //Delete obsolete files
  foreach ($cover_files as $file) {
    if (!$time || (filemtime($file) < $time)) {
      file_unmanaged_delete($file);
    }
  }
}

/**
 * Retrieve all files under a path recursively
 * @param string $files_path Path or URI
 * @return array An array of file paths or URIs
 */
function _bibdk_covers_get_files($files_path) {
  $files = array();

  foreach (scandir($files_path) as $path) {
    $file_path = $files_path . DIRECTORY_SEPARATOR . $path;
    if (is_dir($file_path)) {
      if (!in_array($path, array('.', '..'))) {
        $files = array_merge($files, _bibdk_covers_get_files($file_path));
      }
    } else {
      $files[] = $file_path;
    }
  }

  return $files;
}

/**
 * Return the path to the cover of the object.
 */
function bibdk_covers_object_path($object_id, $path = 'medium') {
  switch ($path) {
    case 'frontcover_jpg':
      return file_default_scheme() . '://ting/covers/frontcover_jpg/' . md5($object_id) . '.jpg';
      break;
    case 'backcover_pdf':
      return file_default_scheme() . '://ting/covers/backcover_pdf/' . md5($object_id) . '.pdf';
      break;
    case 'medium':
      return file_default_scheme() . '://styles/medium/public/ting/covers/frontcover_jpg/' . md5($object_id) . '.jpg';
      break;
    case 'large':
      return file_default_scheme() . '://styles/large/public/ting/covers/frontcover_jpg/' . md5($object_id) . '.jpg';
      break;
    default:
      return NULL;
  }
}
