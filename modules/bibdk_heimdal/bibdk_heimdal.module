<?php

/**
 * @file bibdk_heimdal.module
 * Provide functionality for retrieving logindata from the hjemdal client
 * and bind hjemdal userdata with existing user or create a new user.
 * Users known in bibliotek.dk will be automaticly logged in.
 * Handle data from:
 *   Library login - userid/cpr from the users local library
 *   NemId - cpr/userid
 *   Wayf - wayfid
 * And agency data known for the user
 *
 * Setup for hjemdal client is handled in SMAUG ADMIN -
 * urls, attributes, displayname, services and identityProviders
 *
 */

// load forms
require_once 'includes/bibdk_heimdal_forms.inc';
require_once 'includes/bibdk_heimdal.pages.inc';

/**
 * Implements hook_menu().
 */
function bibdk_heimdal_menu() {
  $items = array();
  $items['heimdal/login'] = array(
    'title' => t('Login with heimdal', array(), array('context' => 'heimdal')),
    'description' => t('Provides heimdal login.'),
    'page callback' => 'bibdk_heimdal_redirect_login',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['heimdal/verify'] = array(
    'title' => t('Select an email', array(), array('context' => 'heimdal')),
    'description' => t('select an email to use'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_heimdal_select_email_form'),
    'file' => 'includes/bibdk_heimdal_forms.inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['heimdal/email'] = array(
    'title' => t('Write an email address', array(), array('context' => 'heimdal')),
    'description' => t('Bibliotek.dk needs an email'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_heimdal_verify_email_form'),
    'file' => 'includes/bibdk_heimdal_forms.inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['heimdal/loginrequest/%'] = array(
    'title' => t('Write an email address', array(), array('context' => 'heimdal')),
    'description' => t('Bibliotek.dk needs an email'),
    'page callback' => 'bibdk_heimdal_handle_login_request',
    'page arguments' => array(2),
    'file' => 'includes/bibdk_heimdal.pages.inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['heimdal/logout'] = array(
    'title' => t('Logout', array(), array('context' => 'heimdal')),
    'description' => t('Log out of heimdal'),
    'page callback' => 'bibdk_heimdal_custom_drupal_logout',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );


  return $items;
}

/**
 * Umplements hook_init
 *
 * When user is in a login flow he might be redirected to an arbitrary
 * page, where a modal should open - this one adds appropiate javascript
 * to run.
 */
function bibdk_heimdal_init() {
  if (isset($_GET['message'])) {
    drupal_set_message($_GET['message']);
  }

  // check if error is et in $_GET - if so abort
  bibdk_heimdal_check_for_errors();
  if (isset($_SESSION['heimdal']['action'])) {
    $action = $_SESSION['heimdal']['action'];
    switch ($action) {
      case 'write_email':
        bibdk_heimdal_forms_add_email_write_js();
        break;
      case 'select_email':
        bibdk_heimdal_forms_add_email_select_js();
        break;
      default:
        break;
    }
    unset($_SESSION['heimdal']['action']);
  }
}

/**
 * check if error is et in $_GET - if so abort
 *NOTICE this one does a redirect
 */
function bibdk_heimdal_check_for_errors() {
  $error = isset($_GET['error']) ? $_GET['error'] : '';
  if (!empty($error)) {
    $message = t($_GET['error'], array(), array('context' => 'heimdal'));
    bibdk_heimdal_cleanup_and_exit($message);
  }
}


/**
 * Do a login or redirect to appropriate page.
 */
function bibdk_heimdal_redirect_login() {
  // get the heimdal user
  $heimdal_user = bibdk_heimdal_get_heimdal_user();
  // next step checks the user and sets SESSION and form_state parameters for further handling
  // @see bibdk_provider/bibdk_provider.heimdal.inc::bibdk_provider_heimdal_login_creds()
  $form_state = bibdk_heimdal_get_form_state($heimdal_user);
  if (bibdk_heimdal_check_formstate($form_state)) {
    //all is good - submit login form
    bibdk_heimdal_do_login($form_state);
  }

  if (isset($_SESSION['heimdal']['action'])) {
    // page requires additional action/userinput. Javascript will be set to handle that
    // @see bibdk_heimdal_init()
    drupal_goto('<front>');
  }
  // this should not happen ...
  bibdk_heimdal_cleanup_and_exit();
}

/**
 * Get form state via provicer
 * @param $heimdal_user
 * @return mixed
 */
function bibdk_heimdal_get_form_state($heimdal_user) {
  return ding_provider_invoke('heimdal', 'login_creds', $heimdal_user);
}

/**
 * If an error occurs .. set a message and do a redirect
 *
 * @param bool $ajax
 *   If ajax is set to true a client side javascript will trigger the redirect
 */
function bibdk_heimdal_cleanup_and_exit($message = NULL, $ajax = FALSE) {
  if (empty($message)) {
    $message = t('An error occured while logging in - please try again');
  }

  drupal_set_message($message, 'error');

  if (isset($_SESSION['heimdal'])) {
    if ($_SESSION['heimdal']['logged_in']) {
      $url = bibdk_heimdal_get_return_url();
      bibdk_heimdal_do_logout('heimdal/logout', $ajax);
    }
  }
  if (isset($_SESSION['heimdal'])) {
    unset($_SESSION['heimdal']);
  }
  // go to frontpage
  drupal_goto('<front>');
}

/**
 * Get an url to return to when logging out of heimdal
 * if user is logged in bibliotek.dk make sure he is
 * redirected to logout page - if not simply return to
 * frontpage
 *
 * @return string
 */
function bibdk_heimdal_get_return_url() {
  global $user;
  return ($user->uid === 0) ? '/' : 'heimdal/logout';
}

/**
 * Execute the login form
 *
 * @param string $name
 *   Username
 */
function bibdk_heimdal_do_login($form_state) {
  drupal_form_submit('user_login_block', $form_state);
  $errors = form_get_errors();
  if (!empty($errors)) {
    bibdk_heimdal_cleanup_and_exit();
  }

}

/**
 * Check form state before logging in
 *
 * @param $form_state
 * @return bool
 */
function bibdk_heimdal_check_formstate($form_state) {
  if (isset($form_state['values']['name']) && isset($form_state['values']['pass'])) {
    // all is okey dokey
    return TRUE;
  }
  // @TODO more checks
  return FALSE;
}


/**
 * Implements hook_form_alter
 *
 * add custom validation for bibdk_heimdal depending on user state
 */
function bibdk_heimdal_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
      // option to set authentication provider for ding user (@see ding_user_user_login_validate)
      $form['authentication_provider'] = array(
        '#type' => 'hidden',
      );
      // add a validation handler (if provider implements it)
      $provider = ding_provider_get_provider_module_name('heimdal');
      if (isset($provider)) {
        $function = $provider . '_heimdal_validate';
        if (function_exists($function)) {
          array_unshift($form['#validate'], $function);
        }
      }
      break;
    default:
      break;
  }
}

/**
 * Get user initialized from heimdal
 *
 * @return bibdkHeimdalUser
 */
function bibdk_heimdal_get_heimdal_user() {
  // get attributes from heimdal
  $heimdal_attributes = bibdk_heimdal_get_heimdal_attributes();
  if (bibdk_heimdal_check_culr_user($heimdal_attributes)) {
    // get users defined in heimdal/culr
    $heimdal_user = new bibdkHeimdalUser($heimdal_attributes);
    return $heimdal_user;
  }

  // there is something wrong with the attributes - abort
  return null;
}

function bibdk_heimdal_check_culr_user($attributes) {
  if (empty($attributes['attributes']['agencies'])) {
    bibdk_heimdal_cleanup_and_exit(bibdk_heimdal_pages_no_culr_message());
  }
  return true;
}

/**
 * Get attributes from heimdal
 * @return array
 */
function bibdk_heimdal_get_heimdal_attributes() {
  static $return_array;
  if (!empty($return_array)) {
    return $return_array;
  }
  // authorization code for further requests
  $auth_code = !empty($_REQUEST['code']) ? $_REQUEST['code'] : NULL;
  if (!isset($auth_code)) {
    return array();
  }

  $curl = new bibdkHeimdalCurl();
  $return_array = $curl->getAttributes($auth_code);
  if ($return_array === FALSE) {
    // this is a http error - abort
    bibdk_heimdal_cleanup_and_exit();
  }


  return $return_array;
}

/**
 * Implements hook_user_logout
 */
function bibdk_heimdal_user_logout() {
  bibdk_heimdal_do_logout();
}

/**
 * Do a logout of heimdal. NOTICE this one does a redirect to heimdal thus
 * leaving drupal's logout flow. To solve this we made a custom logout in hook_menu.
 * @see  bibdk_heimdal_custom_drupal_logout()
 *
 * @param string $url
 *   The url to go to after logout
 * @param bool $ajax
 *   Do an ajax redirect or not
 */
function bibdk_heimdal_do_logout($url = 'heimdal/logout', $ajax = fALSE) {
  if (isset($_SESSION['heimdal'])) {
    $return_uri = bibdkHeimdalHelpers::bibdk_heimdal_get_full_url($url);
    $access_token = isset($_SESSION['heimdal']['access_token']) ? $_SESSION['heimdal']['access_token'] : FALSE;

    unset($_SESSION['heimdal']);
    if ($access_token) {
      $config = variable_get('ding_wayf', NULL);
      $path = $config['clientplatform'] . '/logout?redirect_uri=' . $return_uri . '&access_token=' . $access_token;
    }
    else {
      drupal_set_message(t('bibdk_heimdal_not_logged_out_of_hejmdal', array(), array('context' => 'bibdk_heimdal')));
      $path = '<front>';
    }

    if ($ajax) {
      bibdk_heimdal_forms_ctools_redirect($path);
    }

    drupal_goto($path);
  }
}

/**
 * Custom logout. Basically a copy of user_logout_current_user(),
 * @see user.pages.inc::user_logout_current_user()
 */
function bibdk_heimdal_custom_drupal_logout() {
  global $user;
  if ($user->uid !== 0) {
    module_load_include('inc', 'user', 'user.pages');
    user_logout_current_user();
    if (isset($_GET['message'])) {
      $message = t($_GET['message'], array(), array('context' => 'heimdal'));
      drupal_set_message($message);
    }
  }

  drupal_goto();
}


/** Implements hook_form_FORM_ID_alter (user_login)
 *
 * add heimdal login link to user login form
 */
function bibdk_heimdal_form_user_login_alter(&$form, &$form_state) {
  $config = variable_get('ding_wayf', NULL);
  if (!$config['heimdallogin']) {
    return;
  }

  $form['login_methods'][] = array(
    'content' => bibdk_heimdal_login_link(),
    '#weight' => -2,
  );
}

/**
 * Get heimdal login link from config settings
 *
 * @param
 * @return array
 *   empty or link for drupal render
 */
function bibdk_heimdal_login_link() {
  global $user;
  if ($user->uid == 0) {
    $url = bibdk_heimdal_get_login_url();
    if (!empty($url)) {
      $wrapper = bibdk_heimdal_login_wrapper();
      $wrapper['helptxt'] = array(
        '#type' => 'html_tag',
        '#tag' => 'h2',
        '#value' => t('BIBLOGIN_leadtext', array(), array('options' => array('context' => 'heimdal'))),
      );
      $wrapper['links'] = bibdk_heimdal_get_login_link();
      return $wrapper;
    }
  }
  return array();
}

/**
 * Get a link to render
 * @return array
 */
function bibdk_heimdal_get_login_link() {

  return array(
    bibdk_heimdal_get_logo(),
    //bibdk_heimdal_get_nemid_logo(),
  );
}

/**
 * Get logo and alt text.
 * @return array
 *   render array for drupal_render
 */
function bibdk_heimdal_get_logo() {
  $logo_path = base_path() . drupal_get_path('theme', $GLOBALS['theme']);
  $logo_path .= '/img/in_use/bibliotekslogin_logo.png';
  $logo_alt_text_accessplatform = t('logo_alt_text_accessplatform', array(), array('context' => 'heimdal'));

  $image = array(
    '#theme' => 'image_formatter',
    '#item' => array(
      'uri' => $logo_path,
      'alt' => $logo_alt_text_accessplatform,
    ),
    '#path' => bibdk_heimdal_get_path(),
  );
  return $image;
}

/**
 * Get the logo for nemid
 * @return array
 *   Markup for drupal_render
 */
function bibdk_heimdal_get_nemid_logo() {
  $logo_path = base_path() . drupal_get_path('theme', $GLOBALS['theme']);
  $logo_path .= '/img/in_use/nemid-logo.png';
  $logo_alt_text_nemid = t('logo_alt_text_nemid', array(), array('context' => 'heimdal'));

  $image = array(
    '#theme' => 'image_formatter',
    '#item' => array(
      'uri' => $logo_path,
      'alt' => $logo_alt_text_nemid,

    ),
    '#path' => bibdk_heimdal_get_path(),
  );
  return $image;
}

function bibdk_heimdal_get_path() {
  return array(
    'path' => bibdk_heimdal_get_login_url('heimdal/login'),
    'options' => array(
      'attributes' => array(
        'title' => 'Heimdal login',
        'id' => array('bibdk-heimdal-login-link'),
      ),
    ),
  );
}

/**
 * Get the url for heimdal login
 * @return string
 */
function bibdk_heimdal_get_login_url($relative_path = '') {
  $redirect_url = bibdkHeimdalHelpers::bibdk_heimdal_get_full_url($relative_path);
  $config = variable_get('ding_wayf', NULL);
  $accessplatform = isset($config['heimdallogin']) ? $config['heimdallogin'] : FALSE;

  $heimdal_url = '';
  if (!empty($redirect_url)) {
    $redirect = '&redirect_uri=' . $redirect_url;
  }
  if ($accessplatform) {
    $heimdal_url .= $config['clientplatform'] . '/oauth/authorize?response_type=code&client_id=' . $config['clientid'] . $redirect;
  }

  return $heimdal_url;
}


/**
 * Get a wrapper for heimdal login
 * @return array
 */
function bibdk_heimdal_login_wrapper() {
  $wrapper = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('bibdk-login-method')),
  );
  return $wrapper;
}


/**
 * Get new access token
 *
 * @return string token
 */
function bibdk_heimdal_get_token() {
  return variable_get('heimdal_access_token', FALSE);
}
