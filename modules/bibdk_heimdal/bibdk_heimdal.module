<?php

/**
 * @file bibdk_heimdal.module
 * Provide functionality for retrieving logindata from the hjemdal client
 * and bind hjemdal userdata with existing user or create a new user.
 * Users known in bibliotek.dk will be automaticly logged in.
 * Handle data from:
 *   Library login - userid/cpr from the users local library
 *   NemId - cpr/userid
 *   Wayf - wayfid
 * And agency data known for the user
 *
 * Setup for hjemdal client is handled in SMAUG ADMIN -
 * urls, attributes, displayname, services and identityProviders
 *
 */

/**
 * Implements hook_menu().
 */
function bibdk_heimdal_menu() {
  $items = array();

  $items['heimdal/login'] = array(
    'title' => t('Bind user to heimdal ', array(), array('context' => 'heimdal')),
    'description' => t('Provides heimdal login.'),
    'page callback' => 'bibdk_heimdal_redirect_login',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Redirect heimdal login
 *
 * @param
 * @return do direct login or present bibdk_heimdal_form acceptform for binding username/pin with borrower_id 
 */
function bibdk_heimdal_redirect_login() {
  global $user;

  $borrower_id_url = bibdk_heimdal_get_login_ticket();
  $borrower_id = bibdk_heimdal_get_userid($borrower_id_url);

  $name = BibdkUser::instance()->verifyborrowerid($borrower_id['cpr']);
  if ($user->uid == 0 && !empty($name) ) {
    // user exists username and borrowerid
    bibdk_heimdal_do_login($name);
  } else {
    // user do not exist - add data
    return drupal_get_form('bibdk_heimdal_form');
  }

}

/**
 * Create heimdal login link
 *
 * @param
 * @return string - ticket link
 */
function bibdk_heimdal_get_login_ticket() {
  $config = variable_get('ding_wayf', NULL);
  $accessplatform = isset($config['heimdallogin']) ? $config['heimdallogin'] : FALSE;

  $hemidal_token = $_REQUEST['token'];
  if (empty($hemidal_token)) {
    watchdog('security', 'Bibdk login token not set: access_token (%token) ', array('%token' => $hemidal_token,), WATCHDOG_ERROR);
  }
  $hemidal_id = $_REQUEST['id'];
  if ($accessplatform) {
    $ticket_link  = $config['hosturl'] . '/getTicket/' . $hemidal_token . '/' . $hemidal_id;
  }
  return $ticket_link;
}

/**
 * Get heimdal ticket
 *
 * @param heimdal url
 * @return array - borrower_info
 */
function bibdk_heimdal_get_userid($borrower_id_url) {
  $curl = new MicroCURL();
  //Get login ticket
  $heimdal_attributes = $curl->get($borrower_id_url);
  $curl->close();
  $result = json_decode($heimdal_attributes);
  $favorit_links = array();
  if (!empty($result->attributes->agencies)) {
    foreach ($result->attributes->agencies as $id => $branch) {
      $favorit_links[$branch->agencyId] = $branch;
    }
  }
  $borrower_info = array();
  $borrower_info['wayfId'] = NULL;
  $borrower_info['cpr'] = '';
  if (!empty($result->attributes->wayfId)) {
    $borrower_info['wayfId'] = $result->attributes->wayfId;
  }
  if (!empty($result->attributes->cpr)) {
    $borrower_info['cpr'] = $result->attributes->cpr;
  }
  if (!empty($result->attributes->userId)) {
    $borrower_info['cpr'] = $result->attributes->userId;
  }

  bibdk_heimdal_set_session('heimdal_borrower_wayfid', $borrower_info['wayfId']);
  bibdk_heimdal_set_session('heimdal_borrower_id', $borrower_info['cpr']);
  bibdk_heimdal_set_session('favorit_links', $favorit_links);

  return $borrower_info;
}

/**
 * Get heimdal register form for typing username/password
 *
 * @param $form, $form_state
 * @return $form
 */
function bibdk_heimdal_form($form, $form_state) {

  $form['header'] = array(
    '#theme' => 'html_tag',
    '#value' => t('type existing username and password for binding or create new user ...', array(), array('context' => 'heimdal')),
    '#tag' => 'p',
    '#attributes' => array(
      'class' => array('bibdk-heimdal-info'),
    ),
  );

  $form['#validate'][] ='bibdk_heimdal_validate';
  $form['heimdal']['username_name'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#size' => 60,
    '#maxlength' => 60,
    '#attributes' => array(
      'type' => 'email',
      'pattern' => "[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}$",
      'class' => array('bibdk-heimdal-name'),
    ),
    '#title' => t('Username', array(), array('context' => 'heimdal')),
  );
  $form['heimdal']['username_name_password'] = array(
    '#type' => 'password',
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => TRUE,
    '#title' => t('Password', array(), array('context' => 'heimdal')),
    '#attributes' => array(
      'class' => array('bibdk-heimdal-password'),
    ),
  );
  $form['heimdal'][] = array (
    '#type' => 'submit',
    '#value' => t('save', array(), array('context' => 'heimdal')),
    '#attributes' => array(
      'class' => array('bibdk-heimdal-save'),
    ),
  );

  $form['heimdal'][] = array (
    '#theme' => 'link',
    '#text' => t('Request new password', array(), array('context' => 'heimdal')),
    '#path' => 'bibdk_modal/forgot_password_direct',
    '#options' => array(
      'attributes' => array(
        'data-reveal-id' => 'bibdk-modal',
        'data-reveal-ajax' => 'true',
        'alt' => t('Request new password via e-mail.', array(), array('context' => 'heimdal')),
        'class' => array('bibdk-heimdal-forgot', 'forgot-pword-link', 'bibdk-modal-login')
      ),
      'html' => TRUE,
    ),
    '#weight' => -1,
  );

  return $form;
}

/**
 * validate heimdal register form. binding borrowerid with username/password
 *
 * @param $form, $form_state
 * @return do login or not valid username/password set as a drupal message
 */
function bibdk_heimdal_validate($form, $form_state) {

  $username = $form_state['values']['username_name'];
  if (!valid_email_address($username)) {
    $text = t('user name is not a valid email address', array(), array('context' => 'heimdal'));
    drupal_set_message($text . ': ' . $username, 'status');
  } else {

    $pincode = $form_state['values']['username_name_password'];

    // do username/pincode exist
    $valid_user = BibdkUser::instance()->login($username, $pincode);
    $borrowerid_session = bibdk_heimdal_set_session("heimdal_borrower_id");
    if ($valid_user && $borrowerid_session != '') {
      // bind borrower_id for username
      bibdk_heimdal_bind_borrower_id($username, $borrowerid_session);
    } else {
      if ($borrowerid_session != '') {
        // create user
        bibdk_heimdal_create_borrower_id($username, $borrowerid_session, $pincode);
      } else {
        $text = t('user could not added to bibliotek.dk', array(), array('context' => 'heimdal'));
        drupal_set_message($text . ': ' . $username, 'status');
      }
    }
  }
}

/**
 * Bind heimdal borrowerid with username
 *
 * @param $username, $borrowerid_session
 */
function bibdk_heimdal_bind_borrower_id($username, $borrowerid_session) {
  BibdkUser::instance()->updateBorrowerId($username, $borrowerid_session);
  $text = t('user added to existing bibliotek.dk', array(), array('context' => 'heimdal'));
  drupal_set_message($text . ': ' . $username, 'status');
  // do login
  bibdk_heimdal_do_login($username);
}

/**
 * create new or bind user with heimdal borrowerid, username and pincode
 *
 * @param $username, $borrowerid_session, $pincode
 */
function bibdk_heimdal_create_borrower_id($username, $borrowerid_session, $pincode) {

  // do username exist
  $valid_user = BibdkUser::instance()->verify($username);
  if ($valid_user) {
     // username exist
     $text = t('user exist in bibliotek.dk, but password not correct', array(), array('context' => 'heimdal'));
     drupal_set_message($text . ': ' . $username, 'warning');
  } else {
    // username do not exist - create new user
    $wayfid = bibdk_heimdal_set_session('heimdal_borrower_wayfid');
    $valid_user = BibdkUser::instance()->create($username, $pincode);
    if ($valid_user) {
      if (!empty($wayfid)) {
        BibdkUser::instance()->bindWayf($username, $wayfid, $loginType = 'wayf_id');
      }
      // new user created
      $text = t('user added bibliotek.dk', array(), array('context' => 'heimdal'));
      drupal_set_message($text . ': ' . $username, 'status');
      $valid_user = BibdkUser::instance()->login($username, $pincode);
      $borrowerid_session = bibdk_heimdal_set_session("heimdal_borrower_id");
      if ($valid_user && $borrowerid_session != '') {
        // bind borrower_id for username
        BibdkUser::instance()->updateBorrowerId($username, $borrowerid_session);
        // do login
        bibdk_heimdal_do_login($username);
      }
    } else {
      $text = t('could not added new user to bibliotek.dk : ' . $username );
      drupal_set_message($text,'error');
    }
  }
}

/**
 * Heimdal do login
 *
 * @param sting name for login
 */
function bibdk_heimdal_do_login($name) {
  $state = array();
  $state['values']['name'] = $name;
  $state['values']['mail'] = $name;
  $state['values']['pass'] = 'pass';
  $_SESSION['heimdal_login'] = TRUE;

  //submit login form
  drupal_form_submit('user_login_block', $state);
  $errors = form_get_errors();
  if (!empty($errors)) {
    watchdog('security', 'Bibdk Login failed: could not log on (%user)', array('%user' => $name,), WATCHDOG_ERROR);
    drupal_goto('user');
  }
  else {
    drupal_goto('user/' . $user->uid . '/edit');
  }
}

/**
 * Heimdal do logout
 *
 */
function bibdk_heimdal_do_logout() {
  if (isset($_SESSION['heimdal_login'])) {
    if ($_SESSION['heimdal_login'] ) {
      unset($_SESSION['heimdal_login']);
      $config = variable_get('ding_wayf', NULL);
      drupal_goto($config['hosturl'] . '/logout');
    }
  }
}

/**
 * Get heimdal login link from config settings
 *
 * @param
 * @return string - link to heimdal
 */
function bibdk_heimdal_login_link() {
  global $user;

  if ($user->uid == 0) {
    $config = variable_get('ding_wayf', NULL);
    $accessplatform = isset($config['heimdallogin']) ? $config['heimdallogin'] : FALSE;
    if ($accessplatform) {
      bibdk_heimdal_check_token();
      $config = variable_get('ding_wayf', NULL);
      $heimdal_link = $config['hosturl'] . $config['loginpath'] . '?token=' . $config['clienttoken'] . '&destination=heimdal/login';
      $logo_path = base_path() . drupal_get_path('theme', $GLOBALS['theme']);
      $logo_path .= '/img/in_use/bibliotekslogin_logo.png';
      $logo_alt_text_accessplatform = t('logo_alt_text_accessplatform', array(), array('context' => 'heimdal'));

      $login_link = '<div id="block-ding-wayf-login" class="block block-ding-wayf">';
      $login_link .= '<div class="ding-wayf-logon-block"> <div class="ding-wayf-logoninfo">' . t('Log in to hejmdal', array(), array('context' => 'heimdal')) . '</div>';
      $login_link .= l('<img src="' . $logo_path . '" alt="' . $logo_alt_text_accessplatform . '"/>', $heimdal_link, array('html' => TRUE,)) .'</div>';
      $login_link .= '</div>';

    }
  }
  return $login_link;
}

/** Implements hook_form_FORM_ID_alter (user_login)
 *
 * add heimdal login block to form['actions']
 */
function bibdk_heimdal_form_user_login_alter(&$form, &$form_state) {
  $form['actions']['heimdal_login'] = array(
    '#markup' => bibdk_heimdal_login_link(),
    '#weight' => 110,
  );
}

/**
 * Check if it's time to get a new token
 * Get new token if it's first time elsewhere every month
 *
 */
function bibdk_heimdal_check_token() {
  // Look up last time and compare to 1 day ago.
  if (variable_get('bibdk_heimdal_function_last_run', 0) <= strtotime('-1 day')) {
    $config = variable_get('ding_wayf', NULL);
    $newtoken = bibdk_heimdal_get_token();
    if (!empty($newtoken)) {
      $config['clienttoken'] = $newtoken;
      variable_set('ding_wayf', $config);
      watchdog('security', 'Bibdk get new token set: access_token (%token)', array('%token' => $newtoken,), WATCHDOG_NOTICE);
      //Store the time for last run.
      variable_set('bibdk_heimdal_function_last_run', time());
    } else {
      watchdog('security', 'Bibdk get new token set: access_token (%token) could not be recieved', array('%token' => $newtoken,), WATCHDOG_CRITICAL);
    }
  }
}

/**
 * Get new token from smaug
 * call curl for collecting a new valid token
 *
 * @param
 * @return string token
 */
function bibdk_heimdal_get_token() {

  $config = variable_get('ding_wayf', NULL);

  $token_client_secret = $config['clientsecret'];
  $token_client_ID = $config['clientid'];
  $token_platform = $config['clientplatform'];
  $token_post_data = 'grant_type=password&username=@&password=@';

  $curl = new MicroCURL();
  $curl->set_authentication($token_client_ID,$token_client_secret);
  $curl->set_post($token_post_data);
  $curl->set_url($token_platform);
  $curl->set_option(CURLOPT_RETURNTRANSFER, TRUE);
  $curl->set_option(CURLOPT_HTTPHEADER, array('Content-Type: application/x-www-form-urlencoded'));
  $heimdal_token_attributes = $curl->get();
  $curl->close();

  $token =  bibdk_heimdal_get_token_item($heimdal_token_attributes, 'access_token');
  return $token;

}

/**
 * Get token key from attributes
 *
 * @param $token_attributes, $attribute_name default = 'access_token'
 * @return token -  new and valid
 *
 *  * attribute example:
 * {
 * "token_type": "bearer",
 * "access_token": "40cddc1d15798122519ce435ddf65352b3a3eb8c",
 * "expires_in": 2592000
 * }
 *
 */
function bibdk_heimdal_get_token_item($token_attributes, $attribute_name = 'access_token') {

  if (!empty($token_attributes)) {
    $result = json_decode($token_attributes);
    if (!empty($result->access_token)) {
      $new_token = $result->access_token;
      return $new_token;
    }
  }
  watchdog('security', 'Bibdk get new token failed: could not find access_token (%user)', array('%user' => $name,), WATCHDOG_ERROR);
}

/**
 * Keep track of session variable  - set an get
 *
 * @param
 * @return string - session variable
 */
function bibdk_heimdal_set_session($key, $value = NULL) {
  static $storage;
  if ($value) {
    $storage[$key] = $value ;
    $_SESSION['lists'][$key] = $value;
  }
  else if (empty($storage[$key]) && isset($_SESSION['lists'][$key])) {
    $storage[$key] = $_SESSION['lists'][$key];
  }
  if (empty($storage[$key])) {
    return NULL;
  }
  return $storage[$key];
}

/**
 * Implements hook_user_logout().
 *
 * logout from heimdal
 */
function bibdk_heimdal_user_logout($account) {
  cache_clear_all(session_name() . '-' . $account->uid, 'cache_ding_user_credentials');
  bibdk_heimdal_do_logout();
}