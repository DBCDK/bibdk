<?php

class BibdkSubjectHierarchySearchUnitTestCase extends DrupalUnitTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Bibdk Subject Hierarchy Search Unit Test',
      'description' => 'Bibdk Subject Hierarchy Search Unit test.',
      'group' => 'Bibliotek.dk  - Subject Hierarchy',
    );
  }

  public function test_get_bibdk_subject_hierarchy_searchresult_index() {

    module_load_include('module', 'bibdk_subject_hierarchy', 'bibdk_subject_hierarchy');
    $hierarchy = array(
      array(
        'ord' => 'test_1 level_0',
        'term' => array()
      ),
      array(
        'ord' => 'test_2 level_0',
      ),
      array(
        'ord' => 'test_3 level_0',
        'term' => array(
          array(
            'ord' => 'Test_4 level_1',
            'term' => array(
              array(
                'ord' => 'test_5 level_2'
              )
            )
          )
        )
      ),
    );
    $result = _get_bibdk_subject_hierarchy_searchresult_index($hierarchy, 'test');
    $expected_result = array(
      '' =>
        array(
          0 => 0,
          1 => 1,
          2 => 2,
        ),
      2 =>
        array(
          0 => '2,0',
        ),
      '2,0' =>
        array(
          0 => '2,0,0',
        ),
    );
    $this->assertEqual($result, $expected_result, 'search indexes er correct');

    $result = _get_bibdk_subject_hierarchy_searchresult_index($hierarchy, 'test_5');
    $expected_result = array(
      '2,0' =>
        array(
          0 => '2,0,0',
        ),
    );
    $this->assertEqual($result, $expected_result, 'Only indexes that match search are returned');


    $result = _get_bibdk_subject_hierarchy_searchresult_index($hierarchy, 'Test_4');
    $expected_result = array(
      '2' =>
        array(
          0 => '2,0',
        ),
    );
    $this->assertEqual($result, $expected_result, 'Search is case insensitive');
  }

  public function test_get_bibdk_subject_hierarchy_searchresult_item() {
    $hierarchy = array(
      array(
        'ord' => 'test_1 level_0',
        'term' => array()
      ),
      array(
        'ord' => 'test_2 level_0',
      ),
      array(
        'ord' => 'test_3 level_0',
        'term' => array(
          array(
            'ord' => 'Test_4 level_1',
            'term' => array(
              array(
                'ord' => 'test_5 level_2',
                'cql' => 'cql_string'
              )
            )
          )
        )
      ),
    );

    // correct item is extracted with cql url
    $result = _get_bibdk_subject_hierarchy_searchresult_item($hierarchy, '2,0,0', 'testpath');
    $expected_result = array (
      '#theme' => 'link',
      '#text' => 'test_5 level_2',
      '#path' => 'search/testpath/cql_string',
      '#options' =>
        array (
          'attributes' =>
            array (
              'class' =>
                array (
                ),
            ),
          'html' => false,
        ),
    );
    $this->assertEqual($result, $expected_result, 'correct item is extracted with cql url');

    // correct item is extracted with index url
    $result = _get_bibdk_subject_hierarchy_searchresult_item($hierarchy, '2,0', 'testpath');
    $expected_result = array (
      '#theme' => 'link',
      '#text' => 'Test_4 level_1',
      '#path' => 'bibdk_subject_hierarchy/nojs/2,0',
      '#options' =>
        array (
          'attributes' =>
            array (
              'class' =>
                array (
                  0 => 'use-ajax',
                  1 => 'nesting',
                ),
            ),
          'html' => false,
        ),
    );
    $this->assertEqual($result, $expected_result, 'correct item is extracted with index url');

    // invalid base index
    $result = _get_bibdk_subject_hierarchy_searchresult_item($hierarchy, '4,0', 'testpath');
    $expected_result = array();
    $this->assertEqual($result, $expected_result, 'undefined index returns empty array');

    // invalid sub index
    $result = _get_bibdk_subject_hierarchy_searchresult_item($hierarchy, '2,5', 'testpath');
    $expected_result = array();
    $this->assertEqual($result, $expected_result, 'undefined index returns empty array');


    debug($result);

  }
}
