<?php
module_load_include('inc', 'bibdk_openuserstatus', 'includes/bibdk_openuserstatus.form');
module_load_include('inc', 'bibdk_openuserstatus', 'includes/bibdk_openuserstatus.mypage');

/**
 * Implements hook_menu.
 */
function bibdk_openuserstatus_menu() {

  $items['userstatus/pickuplib'] = array(
    'page callback' => 'bibdk_openuserstatus_new_pickuplibrary_selected',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/bibdk_openuserstatus.ajax.inc',
  );

  $items['openuserstatus/getuserstatus'] = array(
    'page callback' => 'bibdk_openuserstatus_get_user_status',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/bibdk_openuserstatus.ajax.inc',
  );

  $items['admin/config/user-interface/bibdk_openuserstatus'] = array(
    'title' => 'Bibliotek.dk openUserstatus',
    'description' => 'Customize the openUserstatus settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_openuserstatus_admin'),
    'access arguments' => array('administer blocks'),
    'file' => 'includes/bibdk_openuserstatus.admin.inc',
  );

  $items['user/%/bibdk_openuserstatus'] = array(
    'title' => 'Userstatus',
    'description' => 'Status for user\'s loans and reservations',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_openuserstatus_form'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => TRUE,
    'access arguments'=> 'user_edit_access',
    'weight' => 10,
  );

  return $items;
}

/**
 * Implements hook to user_help_list
 * */
function bibdk_openuserstatus_user_help_list() {
  return array('openuserstatus_mypage_help_key'=>'openuserstatus_mypage_help_label');
}

/**
 * Implement hook_ctools_plugin_api().
 */
function bibdk_openuserstatus_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_theme().
 * @return array
 */
function bibdk_openuserstatus_theme() {
  $theme_path = drupal_get_path('module', 'bibdk_openuserstatus') . '/theme';
  return array(
    'bibdk_openuserstatus' => array(
      'template' => 'bibdk_openuserstatus',
      'path' => $theme_path,
      'variables' => variable_get('bibdk_openuserstatus_settings', $default = array()),
    ),
    'bibdk_openuserstatus_row_item' => array(
      'template' => 'bibdk_openuserstatus_row_item',
      'path' => $theme_path,
      'variables' => array('author' => '','title' => ''),
    ),
    'bibdk_openuserstatus_table_name' => array(
      'template' => 'bibdk_openuserstatus_table_name',
      'path' => $theme_path,
      'variables' => array('table_title' => '', 'count' => '', 'heading_level' => '2'),
    ),
    'bibdk_openuserstatus_return_date' => array(
      'template' => 'bibdk_openuserstatus_return_date',
      'path' => $theme_path,
      'variables' => array('overdue' => FALSE, 'date' => '', 'renewable' => ''),
    ),
    'bibdk_openuserstatus_help_icon' => array(
      'template'    => 'bibdk_openuserstatus_help_icon',
      'path' => $theme_path,
      'variables' => array('label' => NULL ),
    ),
  );
}

/**
 * get favourite libraries; get userstatus for each favourite
 * @return array; empty array if no favourites; else [agencyId => UserStatusResponse]
 */
function bibdk_openuserstatus_request() {
  $favourites = bibdk_favourite_get_favourites();
  if (empty($favourites)) {
    return array();
  }
  $ret = array();
  foreach ($favourites as $favourite) {
    $res = $favourite->getUserStatus();

    if ($res === FALSE) {
      continue;
    }

    if (isset($res['error'])) {
      $ret[$favourite->getAgencyId()] = new UserStatusResponse(NULL, $res['error']);
    }
    else {
      $ret[$favourite->getAgencyId()] = new UserStatusResponse($res['response']);
    }
  }
  return $ret;
}

/**
 * Implements hook_bibdk_reservation_complete().
 *
 * unset $_SESSION variable for given library to
 * refresh orderlist
 *
 * @param mixed $pids ; an array of order pid's
 * @param mixed $result ; .. orderid of completed order
 */
function bibdk_openuserstatus_bibdk_reservation_complete($pids, $result) {
  // if an order has been completed BibdkReservationOrderObject is set
  // (@see bibdk_reservation.module::bibdk_reservation_new_order_object
  $library = BibdkReservationOrderObject::GetObject()->getBranchId();
  if (strpos($library, 'DK-') === 0) {
    // strip 'DK-' from librarynumber
    $library = substr($library, 3, strlen($library));
  }
  // @TODO should we just add an order to SESSION
  // instead of updating the whole thing ??
  // if we add an order from the data available, some elements will not be set
  // and a refresh button is probably needed
  if (isset($_SESSION['userStatus'][$library])) {
    unset($_SESSION['userStatus'][$library]);
  }
}

/**

 * Returns favourite libraries
 *
 * @internal TingAgency $fav
 * @return mixed
 */
function bibdk_openuserstatus_get_favourites() {
  return bibdk_favourite_get_favourites();
}


/**
 * @param $agencyId
 * @return null|string
 */
function bibdk_openuserstatus_get_agencyname($agencyId) {
  global $language;
  $agency = new TingAgency($agencyId);
  // @TODO which one to use ??
  //  $name = $agency->getBranch()->getBranchName($language->language);
  //  return isset ($name) ? $name : NULL;
  $name = $agency->getBranch()->getBranchShortName($language->language);
  return isset($name) ? $name : NULL;
}

/**
 * Gets favourite libraries for the current user
 * Returns empty array if zero libraries are found
 *
 * @return array
 */
function bibdk_openuserstatus_get_favourites_array() {
  global $language;
  $favourites = bibdk_favourite_get_favourites();
  $arr = array();
  foreach ($favourites as $favourite) {
    $arr[$favourite->getBranch()->branchId] = $favourite->getBranch()
      ->getBranchShortName($language->language);
  }
  return $arr;
}

/**
 * Gets favourite libraries for the current user
 * Returns empty array if zero libraries are found
 *
 * @param string $agencyId
 * @return array
 */
function bibdk_openuserstatus_get_pickup_agencies($agencyId) {
  $favourites = bibdk_favourite_get_favourites();
  $pickupAgencies = array();
  if (isset($favourites[$agencyId])) {
    if ($favourites[$agencyId]->getUpdateOrderAllowed()) {
      $pickupAgencies = $favourites[$agencyId]->getPickupAgencySelectList();
    }
  }
  return $pickupAgencies;
}

/**
 * Handles the form submission when the renew_all button is hit
 *
 * @param $form
 * @param $form_state
 */
function bibdk_openuserstatus_renew_all_submit($form, &$form_state) {
  $values = $form_state['values']['loans_table'];
  $loans = array();
  foreach ($values as $key => $value) {
    if (!empty($key)) {
      $ids = explode(';', $key);
      $loanId = $ids[0];
      $agencyId = $ids[1];
      $loans[$agencyId][]['loanId'] = $loanId;
    }
  }
  bibdk_openuserstatus_renew_loans($loans);
}

/**
 * Handles the form submission when the renew_marked button is hit
 *
 * @param array $form
 * @param array $form_state
 */
function bibdk_openuserstatus_renew_marked_submit($form, &$form_state) {
  $values = $form_state['values']['loans_table'];
  $loans = array();
  foreach ($values as $value) {
    if (!empty($value)) {
      $ids = explode(';', $value);
      $loanId = $ids[0];
      $agencyId = $ids[1];
      $loans[$agencyId][]['loanId'] = $loanId;
    }
  }
  bibdk_openuserstatus_renew_loans($loans);
}

/**
 * Requesting renewal of loanids in $loans array
 *
 * @param $loans
 */
function bibdk_openuserstatus_renew_loans($loans) {
  $favourites = bibdk_favourite_get_favourites();
  foreach ($loans as $agencyId => $loanIds) {
    if (array_key_exists($agencyId, $favourites)) {
      /**
       * @var $favoriteAgenvy FavouriteAgency
       */
      $favoriteAgenvy = $favourites[$agencyId];
      $response = $favoriteAgenvy->renewLoan($loanIds);
      bibdk_openuserstatus_parse_response($response);
    }
  }
}

/**
 * Parses the webservice response and sets an appropriate message
 *
 * @param array $response
 */
function bibdk_openuserstatus_parse_response($response) {
  if (!isset($response['response']['renewLoanResponse']['renewLoanStatus'])) {
    return;
  }

  $response = $response['response']['renewLoanResponse']['renewLoanStatus'];
  $userstatus = bibdk_openuserstatus_request();
  $loanedItems = bibdk_openuserstatus_get_loans($userstatus);

  $error = array();
  $succes = array();
  foreach ($response as $item) {
    $material = bibdk_openuserstatus_get_material($item['loanId'], $loanedItems);
    if (isset($item['renewLoanError'])) {
      $error[$item['renewLoanError']][] = $material['author'] . ': ' . $material['title'];
    }
    else if (isset($item['dateDue'])) {
      $succes[] = $material['author'] . ': ' . $material['title'];
    }
  }
  bibdk_openuserstatus_renew_request_complete_set_messages($error, $succes);
}

/**
 * Finds the loan with $loanId and returns the loan
 *
 * @param String $loanId
 * @param array $loanedItems
 * @return array
 */
function bibdk_openuserstatus_get_material($loanId, $loanedItems) {
  foreach ($loanedItems as $loaned) {
    if ($loaned['loanId'] == $loanId) {
      return $loaned;
    }
  }
  return array();
}

/**
 * Displays appropriate messages to the user depending on result from webservice
 *
 * @param array $error
 * @param array $succes
 */
function bibdk_openuserstatus_renew_request_complete_set_messages($error, $succes) {
  foreach ($error as $reason => $err) {
    if ($reason == 'Item not renewable') {
      drupal_set_message(t('The following items are not renewable: %materials', array('%materials' => implode(', ', $err)), array('context' => 'bibdk_openuserstatus:error')), 'error');
    }
    else{
      drupal_set_message(t($reason . ' : %materials', array('%materials' => implode(', ', $err)), array('context' => 'bibdk_openuserstatus:error')), 'error');
    }
  }
  if (count($succes) >= 1) {
    drupal_set_message(t('The following materials was sucessfully renewed: %materials', array('%materials' => implode(', ', $succes)), array('context' => 'bibdk_openuserstatus')), 'status');
  }
}

/**
 * Submit function handling submission triggered by the delete selected in the
 * reservations in process table.
 * Collects the sleceted and orderids and groups them buy associated agencyid
 *
 * @param array $form
 * @param array $form_state
 */
function bibdk_openuserstatus_cancel_selected_submit($form, &$form_state) {
  $values = $form_state['values']['reservations_table'];

  $userstatus = bibdk_openuserstatus_request();
  $reservations = bibdk_openuserstatus_get_reservations($userstatus);

  $cancellations = array();
  foreach ($values as $orderId) {
    if ($orderId) {
      $material = bibdk_openuserstatus_get_reservation($orderId, $reservations);
      $agencyId = $material['agencyId'];
      $order = array(
        'orderId' => $orderId,
        'orderType' => $material['orderType'],
      );
      $cancellations[$agencyId][] = $order;
    }
  }
  bibdk_openuserstatus_cancel_reservations($cancellations);
}

/**
 * Extracts reservations from userstatus object
 *
 * @param $orderId
 * @param $reservations
 * @return array
 */
function bibdk_openuserstatus_get_reservation($orderId, $reservations) {
  foreach ($reservations as $reservation) {
    if ($reservation['orderId'] == $orderId) {
      return $reservation;
    }
  }
  return array();
}

/**
 * Requesting cancelation of orderids in $cancellations array
 *
 * @param array $cancellations
 */
function bibdk_openuserstatus_cancel_reservations($cancellations) {
  $favourites = bibdk_favourite_get_favourites();
  foreach ($cancellations as $agencyId => $orderIds) {
    if (array_key_exists($agencyId, $favourites)) {
      $resp = $favourites[$agencyId]->cancelOrder($orderIds);
      if (isset($resp['error']) && !empty($resp['error'])) {
        drupal_set_message(t('An error occured and your request could not be completed. Please try again later.', array(), array('context' => 'bibdk_openuserstatus:error')), 'error');
      }
      else {
        drupal_set_message(t('Your order(s) was successfully canceled', array(), array('context' => 'bibdk_openuserstatus')), 'status');
      }
    }
  }
}
