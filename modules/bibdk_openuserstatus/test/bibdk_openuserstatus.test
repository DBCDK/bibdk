<?php

/**
 * Class BibdkOpenuserstatusTest
 */
class BibdkOpenuserstatusTest extends DrupalWebTestCase {

  private $response;
  private $agencyId = '737600'; //Guldborgsund
  private $userId = '0413392648'; //Guldborgsund
  private $baseurl;

  /**
   * @return array
   */
  public static function getInfo() {
    return array(
      'name' => t('Bibdk OpenUserstatus Test'),
      'description' => t('Test Bibdk OpenUserstatus'),
      'group' => t('Bibliotek.dk - OpenUserstatus'),
    );
  }

  public function setUp() {
    //Note that openuserstatus_webservice_mockup should be enabled in local installation when testing locally
    menu_rebuild();
    parent::setUp(array(
      'bibdk_openuserstatus',
      'ting_agency',
      'openagency_webservice_mockup',
      'openuserstatus_webservice_mockup',
      'ting_openuserstatus',
      'ding_provider',
      'bibdk_provider',
      'bibdk_webservice',
      'features',
      'bibdk_webservice_settings_develop'
    ));

    global $base_url;
    $this->baseurl = $base_url;
    variable_set('openuserstatus_url', $this->getAbsoluteUrl('openuserstatus_webservice_mockup/renew'));
  }

  public function tearDown() {
    module_disable(array('openuserstatus_webservice_mockup'));
    parent::tearDown();
  }

  public function testRunner() {
    $this->response = unserialize($this->_loadFile('response.serialized'));

    //Testing bibdk_openuserstatus.ajax.inc -- unittest'ish
    $this->test_bibdk_openuserstatus_get_loans();
    $this->test_bibdk_openuserstatus_get_loans_table();
    $this->test_bibdk_openuserstatus_get_reservations();
    $this->test_bibdk_openuserstatus_get_reservations_readyforpickup_table();

    //Testing methods that includes webservice activity. All webservice activity has been mocked up
    /** TESTING BIBDK_OPENUSERSTATUS.MODULE **/
    $this->_setSession();
    $this->test_bibdk_openuserstatus_request();
    $this->test_bibdk_openuserstatus_get_favourites_array();
    //$this->test_bibdk_openuserstatus_get_pickup_agencies();
    $this->test_bibdk_openuserstatus_renew_marked_submit();
  }

  /** TESTING BIBDK_OPENUSERSTATUS.AJAX.INC **/

  private function test_bibdk_openuserstatus_get_loans() {
    $loans = bibdk_openuserstatus_get_loans($this->response);
    $this->assertTrue(is_array($loans), 'Array correctly returned');
    $count = count($loans);
    $this->assertEqual($count, 4, t('Size of array seems right: should be: %right was %was', array(
      '%right' => '4',
      '%was' => $count
    )));
  }

  private function test_bibdk_openuserstatus_get_loans_table() {
    $form = array();
    $loans = bibdk_openuserstatus_get_loans($this->response);
    $agencies = array('737600');
    $named_agencies = bibdk_openuserstatus_agency_names($agencies);
    $form = bibdk_openuserstatus_get_loans_table($form, $loans, $named_agencies);

    $this->assertTrue(is_array($form['loans']), 'Array correctly returned wrapped in a \'loans\' key');

    $loans = $form['loans'];

    $this->assertTrue((is_array($loans['loans_name']) && is_array($loans['loans_table']) && is_array($loans['loans_renew_all']) && is_array($loans['loans_renew_marked'])), 'The present keys seems to be alright');
  }

  private function test_bibdk_openuserstatus_get_reservations() {
    $reservations = bibdk_openuserstatus_get_reservations($this->response);

    $this->assertTrue(is_array($reservations), 'Array correctly returned');
    $this->assertEqual(count($reservations), 5, 'Size of array seems right: 5');

    $inProcessCount = 0;
    $readyForPickupCount = 0;

    foreach ($reservations as $reservation) {
      if ($reservation['orderStatus'] == 'In process') {
        $inProcessCount++;
      }

      if ($reservation['orderStatus'] == 'Available for pickup') {
        $readyForPickupCount++;
      }
    }

    $this->assertEqual($inProcessCount, 2, 'Correct amount of materials in process found');
    $this->assertEqual($readyForPickupCount, 3, 'Correct amount of materials ready for pickup found');
  }

  private function test_bibdk_openuserstatus_get_reservations_readyforpickup_table() {
    $form = array();
    $agencies = array('737600');
    $named_agencies = bibdk_openuserstatus_agency_names($agencies);
    $reservations = bibdk_openuserstatus_get_reservations($this->response);
    $form = bibdk_openuserstatus_get_reservations_readyforpickup_table($form, $reservations, $named_agencies);

    $this->assertTrue(is_array($form), 'Array correctly returned');
    $this->assertTrue(array_key_exists('readyforpickup', $form), 'Array contains readyforpickup key');

    $readyForPickup = $form['readyforpickup'];

    $this->assertTrue(array_key_exists('readyforpickup_name', $readyForPickup), 'Array contains readyforpickup_name key');
    $this->assertTrue(array_key_exists('readyforpickup_name', $readyForPickup), 'Array contains readyforpickup_name key');

    $this->assertTrue(array_key_exists('readyforpickup_table', $readyForPickup), 'Array contains readyforpickup_table key');
    $this->assertTrue(!empty($readyForPickup['readyforpickup_table']), '\'readyforpickup_table\' is not empty');
  }

  /** TESTING BIBDK_OPENUSERSTATUS.MODULE **/

  private function test_bibdk_openuserstatus_request() {
    $ret = bibdk_openuserstatus_request();
    $this->assertTrue(array_key_exists($this->agencyId, $ret), 'Test agencyid is present');

    $userstatusResponse = $ret[$this->agencyId];

    $this->assertTrue(is_array($userstatusResponse->response), 'Userstatusresponse has response array');
    $this->assertNull($userstatusResponse->error, 'Error is NULL');
    $this->assertEqual($userstatusResponse->userId, $this->userId, 'userId in UserStatusResponse matches the expected value');
  }

  private function test_bibdk_openuserstatus_get_favourites_array() {
    $ret = bibdk_openuserstatus_get_favourites_array();

    $this->assertTrue(is_array($ret), 'Array was returned');
    $this->assertEqual(count($ret), 2, 'Array length equal 2');
    $this->assertTrue((array_key_exists('710119', $ret) && array_key_exists($this->agencyId, $ret)), 'Arraykeys found as expected');
  }

  private function test_bibdk_openuserstatus_get_pickup_agencies() {
    $ret = bibdk_openuserstatus_get_pickup_agencies($this->agencyId);
    $this->assertTrue(is_array($ret), 'Array was returned');

    $count = count($ret);
    $this->assertEqual($count, 8, t('Array length equal 8, got %count', array('%count' => $count)));

    $keys = array(
      '737600',
      '737601',
      '737602',
      '737603',
      '737604',
      '737605',
      '737607'
    );
    $this->assertTrue($this->_keysExists($ret, $keys), 'Keys is found as expected');
  }

  private function test_bibdk_openuserstatus_renew_marked_submit() {
    $messages = drupal_get_messages();

    $form_state = drupal_json_decode($this->_loadFile('form_submit_renew_marked.json'));

    bibdk_openuserstatus_renew_marked_submit(array(), $form_state);

    $messages = drupal_get_messages();

    $this->assertTrue(array_key_exists('error', $messages), 'Found arraykey error in messages array');

    $index = 0;
    if (strstr($messages['error'][0], 'security updates available for one or more of your modules or themes')) {
      $index = 1;
    }

    $this->assertTrue((strstr($messages['error'][$index], 'Adler-Olsen, Jussi: Alfabethuset. - 6. udgave') && strstr($messages['error'][$index], 'items are not renewable')), 'Adler-Olsen, Jussi: Alfabethuset found as not renewable');
  }

  /**
   * Loads a file with the given filename ($filename) from
   * biodk_openuserstatus/test/mockup and returns its content
   *
   * @param String $filename
   * @return mixed
   */
  private function _loadFile($filename) {
    return file_get_contents(drupal_get_path('module', 'bibdk_openuserstatus') . '/test/mockup/' . $filename);
  }

  /**
   * Sets the value of $_SESSION to a mocked up value
   * (equal the content of biodk_openuserstatus/test/mockup/session.serialized)
   * to avoid unnecessary calls to webservices
   */
  private function _setSession() {
    $session = unserialize($this->_loadFile('session.serialized'));
    $_SESSION = isset($_SESSION) ? array_merge($_SESSION, $session) : $session;
  }

  /**
   * Checks array $ret for each key provided in $keys. If one is not found
   * FALSE will be returned
   *
   * @param array $ret
   * @param array $keys
   * @return bool
   */
  private function _keysExists($ret, $keys) {
    foreach ($keys as $key) {
      if (!array_key_exists($key, $ret)) {
        return FALSE;
      }
    }
    return TRUE;
  }
}
