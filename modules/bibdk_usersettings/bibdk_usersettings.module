<?php

/**
 * @file
 * Module file. Gives the the users ability to setup personal settings through the Openuser webservice
 *
 * The following methods can be used for CRUD actions:
 *  ding_provider_invoke('user', 'set_setting', $user_name, $settings_name, $settings_value );
 *  ding_provider_invoke('user', 'get_setting', $user_name, $settings_name);
 *  ding_provider_invoke('user', 'delete_setting', $user_name, $settings_name);

 */

/**
 * Implements hook_mypage_link().
 *
 * @return mixed
 */
function bibdk_usersettings_mypage_link() {
  $items['user/%user/settings'] =  array(
    'title' => t('Settings', array(), array('context' => 'bibdk_frontend')),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_usersettings_user_settings_form'),
    'access callback' => 'user_edit_access',
    'access arguments'=> array(1),
    'weight' => 35,
  );

  return $items;
}

function bibdk_usersettings_theme() {
  return array('bibdk_usersettings_form' => array(
      'variables' => array('tabs' => array(), 'settings' => array()),
      'template' => 'theme/bibdk-usersettings-form',
      'render_element' => 'form',
      ));
}

/**
 * Form for user settings
 */
function bibdk_usersettings_user_settings_form($form, $form_state) {

  $tabs = module_invoke_all('bibdk_usersettings_user_tabs');

  uasort($tabs, 'drupal_sort_weight');

  if (isset($form_state['clicked_button']['#name'])) {
    $firstelement = $form_state['clicked_button']['#name'];
    $tabs[$firstelement]['attributes']['class'] = array('active');
  }

  $form['wrapper'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'bibdk-tabs',
        'bibdk-tabs--usersettings',
      ),
    ),
  );

  if (empty($tabs)) {
    $form['wrapper']['empty_default']['#markup'] = t('No settings can be set');
    return $form;
  }

  foreach ($tabs as $key => $tab) {
    if (!isset($firstelement)) {
      $tabs[$key]['attributes']['class'] = array('active');
      $firstelement = $key;
    }
    else {
      if ($key != $firstelement)
        $tabs[$key]['attributes'] = array();
    }
  }
  $elements = module_invoke_all('bibdk_usersettings_user_settings');

  uasort($elements, 'drupal_sort_weight');

  foreach ($elements as $element) {
    // Create new tabs
    if (!isset($tab_elements[$element['#tab']])) {
      $tab_elements[$element['#tab']] = array(
        '#type' => 'container',
        '#attributes' => array(
          'id' => $element['#tab'],
          'class' => array('visuallyhidden'),
        ),
      );
    }
    // Add elements to tab
    $tab_elements[$element['#tab']] += $element;

    $tab_elements[$element['#tab']]['actions'] = array(
      '#type' => 'container',
      '#weight' => 100,
      'submit' => array(
        '#type' => 'submit',
        '#value' => t('save_settings'),
        '#action' => 'bibdk_usersettings_user_settings_form_submit',
        '#name' => $element['#tab'],
      ),
    );

  }
  $tab_elements[$firstelement]['#attributes']['class'] = array();

  $form['wrapper']['tabs'] = array(
    '#theme' => 'bibdk_usersettings_form',
    '#tabs' => $tabs,
      //'#settings' => $tab_elements
  );

  $form['wrapper']['elements'] = $tab_elements;
  $form['wrapper']['elements'] += array(
    '#type' => 'container',
    '#tree' => true,
    '#attributes' => array(
      'class' => array(
        'tabs-sections',
        'bibdk-usersettings',
        'clearfix',
      ),
    ),
  );

  return $form;
}

/** submit add/update all user settings
 * @param $form
 * @param $form_state
 */
function bibdk_usersettings_user_settings_form_submit($form, &$form_state) {

  form_state_values_clean($form_state);
  _bibdk_usersettings_clear_expand_settings(NULL);
  if (user_is_logged_in()) {
    bibdk_usersettings_user_settings_set('bibdk_custom_search_start_expand_moved', 'found_yes');
  }

  $groups = $form_state['values']['elements'];
  foreach($groups as $group) {
    foreach($group as $key => $value) {
      if (is_array($value) && isset($form_state['values']['array_filter'])) {
        $value = array_keys(array_filter($value));
      }
      if (is_array($value)) {
        foreach($value as $val) {
          if ($key == "bibdk_custom_search_materials") {
            foreach($value as $element => $bool_val) {
              bibdk_usersettings_user_settings_set($element, $bool_val);
            }
          } else {
            $key_value = 'bibdk_custom_search_start_expand_';
            $vars = explode("/",$val);
            if (sizeof($vars) > 1) {
              $key_value .= $vars[1];
            }
            if ($vars[0] == "bibdk_frontpage") {
              bibdk_usersettings_user_settings_set($key_value, $val);
            }
          }
        }
      } else {
        bibdk_usersettings_user_settings_set($key, $value);
      }
    }
  }

  $form_state['rebuild'] = TRUE;

  drupal_set_message(t('bibdk_usersetting_has_been_updated'));
}

/** Clear all user expand settings
 * @param $clear_option
*/
function _bibdk_usersettings_clear_expand_settings($clear_option) {
  bibdk_usersettings_user_settings_set('bibdk_custom_search_start_expand_', $clear_option);
  bibdk_usersettings_user_settings_set('bibdk_custom_search_start_expand_bog', $clear_option);
  bibdk_usersettings_user_settings_set('bibdk_custom_search_start_expand_artikel', $clear_option);
  bibdk_usersettings_user_settings_set('bibdk_custom_search_start_expand_film', $clear_option);
  bibdk_usersettings_user_settings_set('bibdk_custom_search_start_expand_net', $clear_option);
  bibdk_usersettings_user_settings_set('bibdk_custom_search_start_expand_spil', $clear_option);
  bibdk_usersettings_user_settings_set('bibdk_custom_search_start_expand_musik', $clear_option);
  bibdk_usersettings_user_settings_set('bibdk_custom_search_start_expand_noder', $clear_option);
}

/** Wrapper to get user settings
 * @param $name
 * @param $default
 * @return mixed
 */
function bibdk_usersettings_user_settings_get($name, $default = NULL) {
  global $user;

  if (!ding_user_is_provider_user($user)) {
    return $default;
  }
  try {
    $creds = ding_user_get_creds($user);
  } catch (Exception $e) {
    return $default;
  }

  $data = bibdk_usersettings_get_cache($user->uid);
  if (isset($data[$name])) {
    return $data[$name];
  }

  $provider_data = _bibdk_user_setting_get_from_provider($name, $creds);
  if ($provider_data !== FALSE) {
    $value = unserialize(_bibdk_usersettings_parse_response($provider_data));
    bibdk_usersettings_set_cache($user->uid, $name, $value);
    if (is_null($value)) {
      return $default;
    }
    return $value;
  }

  return $default;
}

function _bibdk_user_setting_get_from_provider($name, $creds) {
  if ($provider_data = ding_provider_invoke('user', 'get_setting', $creds['name'], $name)) {
    return $provider_data;
  }
  return FALSE;
}

function _bibdk_usersettings_parse_response($response) {
  $dom = new DomDocument();
  if (!@$dom->loadXML($response)) {
    if (variable_get('bibdk_provider_enable_logging')) {
      watchdog('bibdk_cart', t('bibdk_usersettings could not load response: %xml', array('%xml' => var_export($response, TRUE))), array(), WATCHDOG_ERROR);
    }
    return null;
  }
  $xpath = new DomXPATH($dom);
  $xpath->registerNamespace('oui', 'http://oss.dbc.dk/ns/openuserinfo');
  if (!isset($xpath)) {
    return null;
  }
  // grap value
  $query = '//oui:settingString';
  $nodelist = $xpath->query($query);
  foreach ($nodelist as $delta => $node) {
    $return = $node->nodeValue;
  }

  return $return;
}

/** Wrapper to set user settings
 * @param $name
 * @param $value
 * @return null
 */
function bibdk_usersettings_user_settings_set($name, $value) {
  global $user;

  if (!ding_user_is_provider_user($user)) {
    return false;
  }
  try {
    $creds = ding_user_get_creds($user);
  } catch (Exception $e) {
    return false;
  }

  if (ding_provider_invoke('user', 'set_setting', $creds['name'], $name, serialize($value))) {
    // update cache
    bibdk_usersettings_set_cache($user->uid, $name, $value);
  }
}

/** Implements hook_user_logout
 * clear cached data
 */
function bibdk_usersettings_user_logout($account) {
  bibdk_user_settings_invalidate_cache($account->uid);
}

/** clear all caches in bin:cache_bibdk_usersettings for given key
 *
 * @param type $key
 */
function bibdk_user_settings_invalidate_cache($key) {
  cache_clear_all($key, 'cache_bibdk_usersettings');
}

function bibdk_usersettings_get_cache($key) {
  $cache = cache_get($key, 'cache_bibdk_usersettings');

  if ($cache) {
    return $cache->data;
  }
  return FALSE;
}

/**
 * Set cache ($key,$data) in bin:cache_bibkd_usersettings
 *
 * @param $key
 * @param $name
 * @param $value
 */
function bibdk_usersettings_set_cache($key, $name, $value) {
  $data = bibdk_usersettings_get_cache($key);
  if ($data === FALSE) {
    $data = array();
  }
  $data[$name] = $value;

  cache_set($key, $data, 'cache_bibdk_usersettings');
}

/**
 * @file
 * Implements hook_bibdk_mypage_tabs().
 */

function bibdk_usersettings_bibdk_mypage_tabs() {
  global $user;

  $ret = array();
  $ret['bibdk_usersettings']['header'] = 'Settings';

  $ret['bibdk_usersettings']['rows']['values'] = bibdk_usersettings_bibdk_mypage_tabs_rows(variable_get('bibdk_mypage_max_items', 3));
  $ret['bibdk_usersettings']['link'] = array(
    'title' => t('Go to settings'),
    'href' => 'user/' . $user->uid . '/settings',
  );

  $ret['bibdk_usersettings']['weight'] = 40;
  $ret['bibdk_usersettings']['help_text_key'] = 'usersettings_mypage_help_key';

  return $ret;
}

/**
 * return usersetting tabtext
 */
function bibdk_usersettings_bibdk_mypage_tabs_rows($max_rows) {
  $liste = array();
  $liste = module_invoke_all('bibdk_usersettings_user_tabs', $liste);
  uasort($liste, 'drupal_sort_weight');

  foreach ( $liste as $tabtext ) {
    if (isset($tabtext['title'])) {
      $ret[] = array('item_row' => t($tabtext['title']));
      if (count($ret) == $max_rows) {
        return $ret;
      }
    }
  };

  return $ret;
}

/**
 * Implements hook to user_help_list
 * */
function bibdk_usersettings_user_help_list() {
  return array('usersettings_mypage_help_key'=>'usersettings_mypage_help_label');
}

/**
 * Implements hook_bibdk_provider_default_settings().
 */
function bibdk_usersettings_bibdk_provider_default_settings() {
  $defaults['bibdk_custom_search_start_expand_'] = NULL;
  $defaults['bibdk_custom_search_start_expand_bog'] = 'bibdk_frontpage/bog';
  $defaults['bibdk_custom_search_start_expand_artikel'] = 'bibdk_frontpage/artikel';
  $defaults['bibdk_custom_search_start_expand_film'] = 'bibdk_frontpage/film';
  $defaults['bibdk_custom_search_start_expand_net'] = 'bibdk_frontpage/net';
  $defaults['bibdk_custom_search_start_expand_spil'] = 'bibdk_frontpage/spil';
  $defaults['bibdk_custom_search_start_expand_musik'] = 'bibdk_frontpage/musik';
  $defaults['bibdk_custom_search_start_expand_noder'] = 'bibdk_frontpage/noder';
  if (user_is_logged_in()) {
    bibdk_usersettings_user_settings_set('bibdk_custom_search_start_expand_moved', 'found_yes');
  }
  return $defaults;
}
