<?php

class bibdkVoxbUnitTestCase extends DrupalUnitTestCase {

  public static function getInfo() {
    return array(
      'name' => t('bibliotek.dk voxb  : Unit tests'),
      'description' => t('Check if parsing voxb returns valid result'),
      'group' => t('bibliotek.dk'),
    );
  }

  public function setUp() {
    module_load_include('module', 'bibdk_voxb');
    $path = drupal_get_path('module', 'bibdk_voxb');
    require_once($path . '/lib/bibdkVoxbUser.php');
    require_once($path . '/lib/bibdk_voxb.parsers.inc');
    require_once($path . '/lib/bibdkVoxbException.php');
    parent::setUp();
  }

  public function testFetchDataParsing() {
    $path = drupal_get_path('module', 'open_voxb_mockup');
    $xml = file_get_contents($path . '/fetchDataResponse.xml');
    $xml = trim($xml);
    $resp = bibdk_voxb_parse_fetchdata_request($xml);


    $this->assertTrue(!empty($resp->rating), 'rating is set on response object');
    $this->assertTrue(!empty($resp->ratingCount), 'ratingCount is set on response object');

    $xml = 'hest';
    try {
      $resp = bibdk_voxb_parse_fetchdata_request($xml);
    }
    catch (bibdkVoxbException $e) {
      $this->assertTrue(TRUE, 'bibdkVoxbException thrown with invalid xml');
    }
  }

  public function test_bibdk_voxb_parse_bind_voxb_response() {
    $path = drupal_get_path('module', 'bibdk_voxb');
    $path .= '/test/bind_voxb_response.xml';
    $xml = file_get_contents($path);
    try {
      $response = bibdk_voxb_parse_bind_voxb_response($xml);
    }
    catch (bibdkVoxbException $e) {

    }
    $this->assertTrue($response == 'pjo@dbc.dk', 'bind_voxb_respoonse returns username on success');

    $xml = 'HEST';
    try {
      $response = bibdk_voxb_parse_bind_voxb_response($xml);
    }
    catch (bibdkVoxbException $e) {
      $this->pass('Exception thrown on not valid xml');
    }
  }

  public function test_bibdkUserData() {
    $path = drupal_get_path('module', 'bibdk_voxb');
    $path .= '/test/fetchMyDataResponse.xml';
    $xml = file_get_contents($path);

    $bibdkUser = new bibdkVoxbUser(215507);
    $bibdkUser->setUserData($xml);

    $data = $bibdkUser->userData();
    $this->assertTrue(is_array($data), 'userdata parsed into array');
  }

  public function testInMultiArray() {
    $path = drupal_get_path('module', 'bibdk_voxb');

    $haystack = array(
      array('hest' => 'hund'),
      'ko' => array('fisk' => 'ged'),
      array('zebra' => array('krokodille' => array('fugl')))
    );

    // test that value in a nested array is found by method
    $needle = 'fugl';
    $result = bibdk_voxb_in_multi_array($needle, $haystack);
    $this->assertTrue(is_array($result), 'found nested needle in haystack');

    $needle = 'hund';
    $result = bibdk_voxb_in_multi_array($needle, $haystack);
    $this->assertTrue(is_array($result), 'found needle in first level haystack');

    $needle = 'so';
    $result = bibdk_voxb_in_multi_array($needle, $haystack);
    $this->assertTrue(($result === FALSE), 'return FALSE when needle not found');
  }

  public function testHund() {
    $this->assertTrue(TRUE, 'true is true');
  }
}