#! groovy
def NAMESPACE = 'frontend-features'
def DEPLOYS
def GITREPOS

pipeline {
  agent {
    node { label 'devel8-head' }
  }
  options {
    buildDiscarder(logRotator(artifactDaysToKeepStr: "", artifactNumToKeepStr: "", daysToKeepStr: "", numToKeepStr: "5"))
    timestamps()
    gitLabConnection('gitlab.dbc.dk')
    // Limit concurrent builds to one pr. branch.
    disableConcurrentBuilds()
  }
  stages {
    stage('get config') {
      agent {
        node { label 'devel8-head' }
      }
      steps {
        dir('bibdk_config') {
          git branch: 'develop',
            credentialsId: 'dscrum_ssh_gitlab',
            url: 'gitlab@gitlab.dbc.dk:d-scrum/d7/bibliotek-dk/bibdk_config.git'
        }
        dir('bibdk_config/jenkins') {
          stash name: "kube-config", includes: "kubeconfig.yaml"
        }
      }
    }

    stage('get repo list') {
      agent {
        node { label 'devel8-head' }
      }
      steps {
        script {
          dir('jenkins/janitor') {
            unstash "kube-config"
            sh """
            virtualenv --system-site-packages venv
            . venv/bin/activate
            pip install kubernetes
            
            python fetch_git_branches.py -u https://github.com/DBCDK/bibdk
            """
          }
        }
      }
      stage('clean up') {
        // use k8s-deploy-env docker agent - so we do not need to install kubectl
        agent {
          docker {
            image "docker.dbc.dk/k8s-deploy-env:latest"
            alwaysPull true
            label "devel8-head"
          }
        }
        steps {
          dir('jenkins/janitor') {
            script {
              withCredentials([file(credentialsId: 'kubecert-frontend', variable: 'KUBECONFIG')]) {
                String configmapbase = 'bibliotekdk-config-'
                String branchname
                String config
                def working = true

                try {
                  def file = readFile("delete_me.txt")
                } catch (err) {
                  echo err.getMessage()
                  echo "Nothing to delete"
                  currentBuild.result = 'SUCCESS'
                  working = false
                  return
                }

                def repos = file.split(' ')
                for (String item : repos) {
                  sh """
                        kubectl -n $NAMESPACE --kubeconfig '${
                    KUBECONFIG
                  }' delete service $item
                        kubectl -n $NAMESPACE --kubeconfig '${
                    KUBECONFIG
                  }' delete deployment $item
                  """
                  if (item.startsWith("bibliotek-dk-www-")) {
                    branchname = item.replace("bibliotek-dk-www-", '')
                    config = configmapbase + branchname
                    sh """
                        kubectl -n $NAMESPACE --kubeconfig '${
                      KUBECONFIG
                    }' delete configmap $config
                  """
                  }

                  print("FISK")
                  println item
                }
                if (working) {
                  sh """
                  rm delete_me.txt
                  """
                }
              }
            }
          }
        }
      }
    }
  }
}
